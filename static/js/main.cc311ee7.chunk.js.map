{"version":3,"sources":["Firebase/firebase.js","layouts/NavBar.js","helpers/db.js","authentication/Login.js","authentication/SignUp.js","images/kkulogo.png","screens/SignIn.js","models/customer.js","data/customerData.js","screens/ConfirmDialog.js","sendEmail/sendEmail.js","screens/Customer.js","models/appointment.js","data/appointmentData.js","screens/AppointmentDialog.js","screens/Appointment.js","images/error.png","screens/Errorpage.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","useStyles","makeStyles","theme","root","flexGrow","menubackgroud","background","title","NavBar","props","classes","React","useState","auth","anchorEl","setAnchorEl","open","Boolean","handleClose","className","AppBar","position","Toolbar","Typography","variant","Button","id","undefined","onClick","event","currentTarget","style","color","Menu","MenuListProps","onClose","TransitionComponent","Fade","MenuItem","to","signOut","fire","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","form","width","submit","card","paddingLeft","paddingRight","paddingBottom","pointer","cursor","Title","SignIn","src","kkulogo","alt","height","textAlign","borderRadius","type","border","provider","GoogleAuthProvider","signInWithPopup","then","result","token","credential","accessToken","user","data","storetoken","username","displayName","email","imageurl","photoURL","userId","uid","firestore","collection","doc","set","localStorage","setItem","JSON","stringify","signin","catch","error","code","errorMessage","message","console","log","Customer","name","bdate","ssn","phone","place","date","time","detail","status","this","getCustomersAdmin","a","orderBy","response","get","array","forEach","customer","push","addCustomerAppoint","appointment","getCustomer","deleteCustomerAdmin","delete","ConfirmDialog","Dialog","close","DialogTitle","DialogContent","DialogActions","init","sendconfEmail","e","preventDefault","confParams","to_name","toString","from_name","emailjs","send","text","table","minWidth","container","flex","padding","head","palette","common","black","white","button","float","Customers","customers","setCustomers","customersUser","setCustomersUser","loading","setLoading","setOpen","conOpen","setConOpen","subOpen","setSubOpen","doneOpen","setDoneOpen","formMode","setFormMode","allReserve","setAllReserve","custId","setCustId","setName","setSsn","setPhone","setEmail","setPlace","setDate","setTime","setDetail","setStatus","setBirth","getlist","list","length","toast","getSubmitUser","getCustomersUser","listUser","getOneCustomer","deleteHandler","success","deleteHandlerUser","deleteCustomerUser","addCustomerHandler","map","custUser","updateCustomerUser","res","update","useEffect","CustomerDialog","fullWidth","maxWidth","Grid","item","xs","fontSize","icon","Close","ConfirmDelete","onSubmit","ConfirmSubmit","pading","TableContainer","component","Paper","alignContent","Table","TableHead","TableRow","TableCell","TableBody","colSpan","css","size","cust","IconButton","Edit","formmode","changeName","target","value","changeSsn","changePhone","changeEmail","changePlace","changeDate","changeTime","changeDetail","changeStatus","addCustomer","onSub","Appointment","firstname","lastname","phonenumber","studentID","medicalcertificate","getAppointments","addAppointment","getAppointment","updateAppointment","deleteAppointment","AppointmentDialog","label","onChange","changeFirstname","validators","errorMessages","autoComplete","changeLastname","changStudentID","changeSSN","changephonenumber","FormControl","FormLabel","RadioGroup","changeCertificate","FormControlLabel","control","Radio","appointments","setAppointments","setFirstName","setLastName","setStudentID","setSSN","setPhoneNumber","setMedicalcertificate","getOneAppointment","addAppointmentHandler","Container","startIcon","AddCircle","Delete","Errorpage","paddingTop","shape","Routers","exact","path","App","isUserSignedIn","setIsUserSignedIn","onAuthStateChanged","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc311ee7.chunk.js","sourcesContent":["import firebase from 'firebase/compat'\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCevvv7f0Y4MB1CPmPS9YObfO345q9Cpt4\",\r\n    authDomain: \"reactlogin-24c53.firebaseapp.com\",\r\n    projectId: \"reactlogin-24c53\",\r\n    storageBucket: \"reactlogin-24c53.appspot.com\",\r\n    messagingSenderId: \"688572760293\",\r\n    appId: \"1:688572760293:web:c3659ad0a8a7f397a8540c\"\r\n  };\r\n\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  export {firebase};","import React from \"react\";\r\nimport { AppBar, Toolbar, IconButton, Typography, makeStyles } from '@material-ui/core';\r\nimport { AccountCircle } from '@material-ui/icons';\r\nimport Button from '@mui/material/Button';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Fade from '@mui/material/Fade';\r\nimport MenuSharpIcon from '@mui/icons-material/MenuSharp';\r\nimport { firebase } from \"../Firebase/firebase\";\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nconst NavBar = (props) => {\r\n    const classes = useStyles();\r\n    const [auth, setAuth] = React.useState(true);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    }\r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const signOut = () => {\r\n        firebase.auth().signOut();\r\n        handleClose();\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\" className={classes.menubackgroud}>\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        APU\r\n                    </Typography>\r\n                    {auth && (\r\n                        <div>\r\n                            <Button\r\n                                id=\"fade-button\"\r\n                                aria-controls=\"fade-menu\"\r\n                                aria-haspopup=\"true\"\r\n                                aria-expanded={open ? 'true' : undefined}\r\n                                onClick={handleMenu}\r\n                                style={{color:'black'}}\r\n                            >\r\n                                <MenuSharpIcon/>\r\n                            </Button>\r\n                            <Menu\r\n                                id=\"fade-menu\"\r\n                                MenuListProps={{\r\n                                'aria-labelledby': 'fade-button',\r\n                                }}\r\n                                anchorEl={anchorEl}\r\n                                open={open}\r\n                                onClose={handleClose}\r\n                                TransitionComponent={Fade}\r\n                            >\r\n                                <MenuItem onClick={handleClose}><Link to=\"/admin\">รอการตรวจสอบ</Link></MenuItem>\r\n                                <MenuItem onClick={handleClose}><Link to=\"/appointment\">ตรวจสอบแล้ว</Link></MenuItem>\r\n                                <MenuItem onClick={() => signOut()}><Link to=\"/\">ออกจากระบบ</Link></MenuItem>\r\n                            </Menu>\r\n                        </div>\r\n                    )}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        \r\n    },\r\n    menubackgroud: {\r\n        background: 'linear-gradient(45deg, #3F838C 30%, #99DFB2 90%)',\r\n        \r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    }\r\n}));\r\n\r\nexport default NavBar;","import firebase from 'firebase/compat';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCevvv7f0Y4MB1CPmPS9YObfO345q9Cpt4\",\r\n    authDomain: \"reactlogin-24c53.firebaseapp.com\",\r\n    projectId: \"reactlogin-24c53\",\r\n    storageBucket: \"reactlogin-24c53.appspot.com\",\r\n    messagingSenderId: \"688572760293\",\r\n    appId: \"1:688572760293:web:c3659ad0a8a7f397a8540c\"\r\n};\r\n    \r\n// Initialize Firebase\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport default fire;","import React, { useState } from 'react';\r\nimport {Container, CssBaseline, Avatar, Typography, FormControlLabel,\r\n    Button, Checkbox, Grid, Link, makeStyles, Card, CardContent} from '@material-ui/core';\r\nimport { LockRounded } from '@material-ui/icons';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport fire from '../helpers/db';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport {ScaleLoader} from 'react-spinners';\r\n\r\nconst Login = (props) => {\r\n    const classes = useStyles();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [rememberme, setRememberMe] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const override = `\r\n        display: block;\r\n        margin-left: 100px;\r\n        border-color: red;\r\n    `;\r\n    const handleEmail = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n    const handlePassword = (event) => {\r\n        setPassword(event.target.value);\r\n    }\r\n    const handleCheck = (event) => {\r\n        setRememberMe(event.target.checked);\r\n    }\r\n    const handlerLogin = () => {\r\n        setLoading(true);\r\n        fire.auth()\r\n            .signInWithEmailAndPassword(email, password)\r\n            .then(response => {\r\n                const {user} =  response;\r\n                const data = {\r\n                    userId: user.uid,\r\n                    email: user.email\r\n                }\r\n                var users = fire.firestore().collection(\"users\").doc(user.uid);\r\n                users.set({\r\n                    email: user.email,\r\n                    id: user.uid\r\n                })\r\n                localStorage.setItem('user', JSON.stringify(data));\r\n                const storage = localStorage.getItem('user');\r\n                const loggedInUser = storage !== null ? JSON.parse(storage) : null;\r\n                props.loggedIn(loggedInUser);\r\n                setLoading(false);\r\n            }).catch(error => {\r\n                toast.error(error.message);\r\n                setLoading(false);\r\n            });\r\n}\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Card className={classes.card}>\r\n                <CardContent>\r\n                    <ToastContainer/>\r\n                    <CssBaseline />\r\n                    <div className={classes.paper}>\r\n                        <Avatar className={classes.avatar}>\r\n                            <LockRounded />\r\n                        </Avatar>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Sign In\r\n                        </Typography>\r\n                        <ValidatorForm\r\n                            onSubmit={handlerLogin}\r\n                            onError={errors => {\r\n                                for (const err of errors) {\r\n                                    console.log(err.props.errorMessages[0])\r\n                                }\r\n                            }}\r\n\r\n                            className={classes.form}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                fullWidth\r\n                                label=\"Email\"\r\n                                onChange={handleEmail}\r\n                                name=\"email\"\r\n                                value={email}\r\n                                validators={['required', 'isEmail']}\r\n                                errorMessages={['this field is required', 'email is not valid']}\r\n                                autoComplete='off' />\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Password\"\r\n                                onChange={handlePassword}\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                value={password}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Checkbox value={rememberme} onChange={(e) => handleCheck(e)} color=\"primary\" />}\r\n                                label=\"Remember me\"\r\n                            />\r\n                            {loading ? (\r\n                                <ScaleLoader\r\n                                css={override}\r\n                                size={150}\r\n                                color={\"#eb4034\"}\r\n                                loading={loading}/>\r\n                            ) : (\r\n                                    <Button\r\n                                    type=\"submit\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    className={classes.submit}\r\n                                >\r\n                                Sign In\r\n                            </Button>\r\n                            )}\r\n                            \r\n                            <Grid container>\r\n                                <Grid item>\r\n                                    <Link onClick={props.toggle} className={classes.pointer} variant=\"body2\">\r\n                                        {\"Don't have an account? Sign Up\"}\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ValidatorForm>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    \r\n    paper: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: '#3F838C'\r\n    },\r\n    form: {\r\n        '@media(minWidth: 568px)' : {\r\n            width: '50%'\r\n        },\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        background: 'linear-gradient(45deg, #3F838C 30%, #99DFB2 90%)',\r\n        margin: theme.spacing(3, 0, 2),\r\n        color: '#fff'\r\n    },\r\n    card: {\r\n        marginTop: '60px',\r\n        paddingLeft: '20px',\r\n        paddingRight: '20px',\r\n        paddingBottom: '20px',\r\n    },\r\n    pointer: {\r\n        cursor: 'pointer',\r\n        color: 'red'\r\n    }\r\n}));\r\n\r\nexport default Login;","import React, {useEffect, useState} from 'react';\r\nimport {Container, CssBaseline, Avatar, Typography, \r\n    Button, Grid, Link, makeStyles, Card, CardContent} from '@material-ui/core';\r\nimport {LockRounded} from '@material-ui/icons';\r\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport fire from '../helpers/db';\r\nimport firebase from '../helpers/db';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst SignUp = (props) => {\r\n    const classes = useStyles();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const handleEmail = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n    const handlePassword = (event) => {\r\n        setPassword(event.target.value);\r\n    }\r\n    const handleConfirmPassowerd = (event) => {\r\n        setConfirmPassword(event.target.value);\r\n    }\r\n    \r\n    const handleSignUp = () => {\r\n        fire.auth()\r\n            .createUserWithEmailAndPassword(email, password)\r\n            .then(response => {\r\n                if(response) {\r\n                    props.toggle();\r\n                    toast.success('User Registered Successfully');                    \r\n                }\r\n            }).catch((error) => {\r\n                switch (error.code) {\r\n                    case 'auth/email-already-in-use':\r\n                        toast.error(error.message);\r\n                        break;\r\n                    case 'auth/invalid-email': \r\n                        toast.error(error.message);                    \r\n                        break;\r\n                    case 'auth/weak-password':\r\n                        toast.error(error.message);\r\n                        break;\r\n                }\r\n            });      \r\n    }\r\n    useEffect(() => {\r\n        ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\r\n            if(value !== password) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return () => {\r\n            ValidatorForm.removeValidationRule('isPasswordMatch');\r\n        }\r\n    }, [password])\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Card className={classes.card}>\r\n                <CardContent>\r\n                    <ToastContainer />\r\n                    <CssBaseline />\r\n                    <div className={classes.paper}>\r\n                        <Avatar className={classes.avatar}>\r\n                            <LockRounded />\r\n                        </Avatar>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Sign Up\r\n                        </Typography>\r\n                        <ValidatorForm\r\n                            onSubmit={handleSignUp}\r\n                            className={classes.form}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                fullWidth\r\n                                label=\"Email\"\r\n                                onChange={handleEmail}\r\n                                name=\"email\"\r\n                                value={email}\r\n                                validators={['required', 'isEmail']}\r\n                                errorMessages={['this field is required', 'email is not valid']}\r\n                                autoComplete='off'\r\n                            />\r\n                            <br />\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Password\"\r\n                                onChange={handlePassword}\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                value={password}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <br />\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                label=\"Confirm password\"\r\n                                fullWidth\r\n                                onChange={handleConfirmPassowerd}\r\n                                name=\"confirmPassword\"\r\n                                type=\"password\"\r\n                                validators={['isPasswordMatch', 'required']}\r\n                                errorMessages={['password mismatch', 'this field is required']}\r\n                                value={confirmPassword}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                className={classes.submit}\r\n                            >\r\n                                Sign Up\r\n                            </Button>\r\n                            <Grid container>\r\n                                <Grid item>\r\n                                    <Link onClick={props.toggle} className={classes.pointer} variant=\"body2\">\r\n                                        {\"Already have an account? Sign In\"}\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ValidatorForm>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        '@media(minWidth: 568px)' : {\r\n        },\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: '#3F838C'\r\n    },\r\n    form: {\r\n        '@media(minWidth: 568px)' : {\r\n            width: '50%',\r\n        },\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        background: 'linear-gradient(45deg, #3F838C 30%, #99DFB2 90%)',\r\n        margin: theme.spacing(3, 0, 2),\r\n        color: '#fff'\r\n    },\r\n    card: {\r\n        marginTop: '60px',\r\n        paddingLeft: '20px',\r\n        paddingRight: '20px',\r\n        paddingBottom: '20px',\r\n    },\r\n    pointer: {\r\n        cursor: 'pointer',\r\n        color: 'red'\r\n    }\r\n}))\r\nexport default SignUp;","export default __webpack_public_path__ + \"static/media/kkulogo.cb762e90.png\";","import React from \"react\";\r\nimport { firebase } from \"../Firebase/firebase\";\r\nimport { Typography } from 'antd';\r\nimport kkulogo from '../images/kkulogo.png';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nconst { Title } = Typography;\r\n\r\nconst SignIn = (props) => {\r\n  const SignInWithFirebase = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n        firebase.auth().signInWithPopup(provider).then((result) => {\r\n            const token = result.credential.accessToken;\r\n            const user = result.user;\r\n            const data = {\r\n                storetoken: token,\r\n                username: user.displayName,\r\n                email: user.email,\r\n                imageurl: user.photoURL,\r\n                userId: user.uid\r\n            }\r\n            var users = firebase.firestore().collection(\"users\").doc(user.email);\r\n                users.set({\r\n                    email: user.email,\r\n            })\r\n            localStorage.setItem('user', JSON.stringify(data));\r\n            props.signin(data);\r\n        }).catch((error) => {\r\n            const errorCode = error.code;\r\n          const errorMessage = error.message;\r\n          const email = error.email;\r\n          const credential = error.credential;\r\n          console.log(errorMessage);\r\n        });\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"loginContainer\">\r\n        <div className=\"loginLogoContainer\">\r\n          <img className=\"loginlogo\" src={kkulogo} alt=\"kkulogo\"/>\r\n        </div>\r\n        <div className=\"loginTitleContainer\" style={{height:100}}>\r\n          <Title style={{ textAlign: 'center'}}>ระบบบริการหน่วยปฐมภูมิ มหาวิทยาลัยขอนแก่น</Title>\r\n        </div>\r\n        <div \r\n            style={{\r\n              width: \"95%\",\r\n              borderRadius: \"20px\",\r\n            }}\r\n        >\r\n          <Link to=\"/admin\">\r\n        <button\r\n          type=\"primary\"\r\n          style={{\r\n            background: \"green\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            width: \"95%\",\r\n            borderRadius: \"20px\",\r\n            height: '50px',\r\n            cursor: \"pointer\"\r\n          }}\r\n          onClick={SignInWithFirebase}\r\n        >\r\n          Login using kkumail\r\n        </button>\r\n        </Link>\r\n        </div>\r\n\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","class Customer {\r\n    constructor(id, name, bdate, ssn, phone, email, place, date, time, detail, status){\r\n        this.id = id;\r\n        this.name = name\r\n        this.bdate = bdate;\r\n        this.ssn = ssn;\r\n        this.phone = phone;\r\n        this.email = email;\r\n        this.place = place;\r\n        this.date = date;\r\n        this.time = time;\r\n        this.detail = detail;\r\n        this.status = status\r\n    }\r\n}\r\n\r\nexport default Customer;","import { firebase } from \"../Firebase/firebase\";\r\nimport Customer from '../models/customer';\r\nimport email from '../screens/Customer';\r\n\r\nconst firestore = firebase.firestore();\r\n\r\nexport const getCustomersAdmin = async () => {\r\n    try {\r\n        const response = await firestore.collection('appointment').orderBy('time');\r\n        const data = await response.get();\r\n        let array = [];\r\n        data.forEach(doc => {\r\n            const customer = new Customer(\r\n                doc.id,\r\n                doc.data().name,\r\n                doc.data().bdate,\r\n                doc.data().ssn,\r\n                doc.data().phone,\r\n                doc.data().email,\r\n                doc.data().place,\r\n                doc.data().date,\r\n                doc.data().time,\r\n                doc.data().detail,\r\n                doc.data().status\r\n            );\r\n            array.push(customer);\r\n        });\r\n        return array;\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\nexport const getCustomersAppoint = async () => {\r\n    try {\r\n        const response = await firestore.collection('complete-appointment').orderBy('time');\r\n        const data = await response.get();\r\n        let array = [];\r\n        data.forEach(doc => {\r\n            const customer = new Customer(\r\n                doc.id,\r\n                doc.data().name,\r\n                doc.data().bdate,\r\n                doc.data().ssn,\r\n                doc.data().phone,\r\n                doc.data().email,\r\n                doc.data().place,\r\n                doc.data().date,\r\n                doc.data().time,\r\n                doc.data().detail,\r\n                doc.data().status\r\n            );\r\n            array.push(customer);\r\n        });\r\n        return array;\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\nexport const getCustomersUser = async () => {\r\n    try {\r\n        const response = await firestore.collection('users/' + 'chatchai_aunjai@kkumail.com' + '/custo');\r\n        const data = await response.get();\r\n        let array = [];\r\n        data.forEach(doc => {\r\n            const customer = new Customer(\r\n                doc.id,\r\n                doc.data().name,\r\n                doc.data().bdate,\r\n                doc.data().ssn,\r\n                doc.data().phone,\r\n                doc.data().email,\r\n                doc.data().place,\r\n                doc.data().date,\r\n                doc.data().time,\r\n                doc.data().detail,\r\n                doc.data().status\r\n            );\r\n            array.push(customer);\r\n        });\r\n        return array;\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\nexport const addCustomer = async (customer) => {\r\n    try {\r\n        await firestore.collection('appointment').doc().set(customer);\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const addCustomerAppoint = async (appointment) => {\r\n    try {\r\n        await firestore.collection('complete-appointment').doc().set(appointment);\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const getCustomer = async (id) => {\r\n    try {\r\n        const customer = await firestore.collection('appointment').doc(id);\r\n        const data = await customer.get();\r\n        return data.data();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const getCustomerApp = async (id) => {\r\n    try {\r\n        const customer = await firestore.collection('complete-appointment').doc(id);\r\n        const data = await customer.get();\r\n        return data.data();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const updateCustomerAdmin = async (id, data) => {\r\n    try {\r\n        const customer = await firestore.collection('appointment').doc(id);\r\n        await customer.update(data);\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const updateCustomerUser = async (id, data) => {\r\n    try {\r\n        const customer = await firestore.collection('users/' + email.toString() + '/custo').doc(id);\r\n        await customer.update(data);\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const deleteCustomerAdmin = async (id) => {\r\n    try {\r\n        await firestore.collection('appointment').doc(id).delete();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const deleteCustomerUser = async (id) => {\r\n    try {\r\n        await firestore.collection('users/' + email.toString() + '/custo').doc(id).delete();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const deleteCustomerAppoint= async (id) => {\r\n    try {\r\n        await firestore.collection('complete-appointment').doc(id).delete();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}","import React from 'react';\r\nimport {Dialog, DialogActions, DialogContent, DialogTitle, Button,} from '@material-ui/core';\r\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\n\r\nexport const ConfirmDialog = (props) => {\r\n    return (\r\n        <Dialog\r\n        open={props.open}\r\n        onClose={props.close}\r\n        aria-labelledby=\"max-width-dialog-title\"\r\n        >\r\n            <DialogTitle>Submit Done!</DialogTitle>\r\n            <ValidatorForm>\r\n                <DialogContent>\r\n                    Send email confirm to user already!\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={props.close} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </ValidatorForm>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default ConfirmDialog;","import{ init } from 'emailjs-com';\r\nimport emailjs from 'emailjs-com';\r\ninit(\"user_5ZCFqcLFXuPKqlVx03Cus\");\r\n// npm install emailjs-com\r\n// invoke in onClick ex.: onClick={sendconfEmail}\r\nexport const sendconfEmail = (e, name, email) => {\r\n    e.preventDefault();\r\n    var confParams = {\r\n        to_name: name.toString(),\r\n        from_name: 'หน่วยบริการปฐมภูมิ123 มหาวิทยาลัยขอนแก่น',\r\n        email: email.toString()\r\n      };\r\n    emailjs.send('service_zn0xihe', 'template_88jjem7', confParams, 'user_5ZCFqcLFXuPKqlVx03Cus')\r\n      .then((result) => {\r\n          console.log(result.text);\r\n      }, (error) => {\r\n          console.log(error.text);\r\n      });\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { firebase } from \"../Firebase/firebase\";\r\nimport \"../App.css\";\r\nimport {\r\n    Table, TableBody, TableCell, TableRow, TableHead,\r\n    TableContainer, Paper, makeStyles, Container,\r\n    Typography, Button, Grid, IconButton\r\n} from '@material-ui/core';\r\nimport { ScaleLoader } from 'react-spinners';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { AddCircle, Edit, Delete } from '@material-ui/icons';\r\nimport { getCustomersAdmin, getCustomer, deleteCustomerAdmin, addCustomerAppoint } from '../data/customerData';\r\nimport {ConfirmDialog} from './ConfirmDialog';\r\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport Customer from \"../models/customer\";\r\nimport {sendconfEmail} from '../sendEmail/sendEmail'\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Box\r\n  } from '@material-ui/core';\r\nimport { Close } from '@material-ui/icons';\r\nconst firestore = firebase.firestore();\r\nconst Customers = () => {\r\n    const classes = useStyles();\r\n    const [customers, setCustomers] = useState([]);\r\n    const [customersUser, setCustomersUser] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [conOpen, setConOpen] = useState(false);\r\n    const [subOpen, setSubOpen] = useState(false);\r\n    const [doneOpen, setDoneOpen] = useState(false);\r\n    const [formMode, setFormMode] = useState(true);\r\n    const [allReserve, setAllReserve] = useState('');\r\n    const [custId, setCustId] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [ssn, setSsn] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [place, setPlace] = useState('');\r\n    const [date, setDate] = useState('');\r\n    const [time, setTime] = useState('');\r\n    const [detail, setDetail] = useState('');\r\n    const [status, setStatus] = useState('');\r\n    const [bdate, setBirth] = useState('');\r\n    const override = `\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;    \r\n        border-color: red;\r\n    `;\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setConOpen(false);\r\n        setSubOpen(false)\r\n    }\r\n    const handleDoneClose = () => setDoneOpen(false)\r\n\r\n    const handleName = (event) => {\r\n        setName(event.target.value);\r\n    }\r\n    const handleSsn = (event) => {\r\n        setSsn(event.target.value);\r\n    }\r\n    const handlePhone = (event) => {\r\n        setPhone(event.target.value);\r\n    }\r\n    const handlePlace = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n    const handleDate = (event) => {\r\n        setPlace(event.target.value);\r\n    }\r\n    const handleTime = (event) => {\r\n        setDate(event.target.value);\r\n    }\r\n    const handleEmail = (event) => {\r\n        setTime(event.target.value);\r\n    }\r\n    const handleDetail = (event) => {\r\n        setTime(event.target.value);\r\n    }\r\n    const handleStatus = (event) => {\r\n        setStatus(event.target.value);\r\n    }\r\n    \r\n    const getlist = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const list = await getCustomersAdmin();\r\n            setCustomers(list);\r\n            setAllReserve(list.length);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const getSubmitUser = async () => {\r\n        try {\r\n            const listUser = await getCustomersUser();\r\n            setCustomersUser(listUser);\r\n            setSubOpen(true);\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const getCustomersUser = async () => {\r\n        try {\r\n            const response = await firestore.collection('users/' + email.toString() + '/custo');\r\n            const data = await response.get();\r\n            let array = [];\r\n            data.forEach(doc => {\r\n                const customer = new Customer(\r\n                    doc.id,\r\n                    doc.data().name,\r\n                    doc.data().bdate,\r\n                    doc.data().ssn,\r\n                    doc.data().phone,\r\n                    doc.data().email,\r\n                    doc.data().place,\r\n                    doc.data().date,\r\n                    doc.data().time,\r\n                    doc.data().detail,\r\n                    doc.data().status\r\n                );\r\n                array.push(customer);\r\n            });\r\n            return array;\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n    const getOneCustomer = async (id) => {\r\n        try {\r\n            setFormMode(false);\r\n            setCustId(id);\r\n            const response = await getCustomer(id);\r\n            setName(response.name);\r\n            setSsn(response.ssn);\r\n            setPhone(response.phone);\r\n            setEmail(response.email);\r\n            setPlace(response.place);\r\n            setDate(response.date);\r\n            setTime(response.time);\r\n            setDetail(response.detail);\r\n            setStatus(response.status);\r\n            setBirth(response.bdate);\r\n            setOpen(true);\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    const deleteHandler = async (id) => {\r\n        try {\r\n            await deleteCustomerAdmin(id);\r\n            setConOpen(false);\r\n            getlist();\r\n            toast.success('Customer Deleted Successfully');\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    const deleteHandlerUser = async (id) => {\r\n        try {\r\n            await deleteCustomerUser(id);\r\n            setConOpen(false);\r\n            getlist();\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    const addCustomerHandler = async (e) => {\r\n        try {\r\n            let status = \"ตรวจสอบแล้ว\";\r\n            const customer = {\r\n                name,\r\n                bdate,\r\n                ssn,\r\n                phone,\r\n                email,\r\n                place,\r\n                date,\r\n                time,\r\n                detail,\r\n                status\r\n            }\r\n            customersUser.map((custUser) => \r\n            updateCustomerUser(custUser.id, customer));\r\n            await addCustomerAppoint(customer);\r\n            setOpen(false);\r\n            setSubOpen(false);\r\n            setDoneOpen(true);\r\n            sendconfEmail(e, name, email);\r\n            deleteHandler(custId);\r\n            getlist();\r\n            setName('');\r\n            setBirth('');\r\n            setSsn('');\r\n            setPhone('');\r\n            setEmail('');\r\n            setPlace('');\r\n            setDate('');\r\n            setTime('');\r\n            setDetail('');\r\n            setStatus('');\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    const updateCustomerUser = async (id, data) => {\r\n        try {\r\n            const res = await getCustomer(custId);\r\n            setEmail(res.email);\r\n            const customer = await firestore.collection('users/' + email.toString() + '/custo').doc(id);\r\n            await customer.update(data);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    const deleteCustomerUser = async (id) => {\r\n        try {\r\n            await firestore.collection('users/' + email.toString() + '/custo').doc(id).delete();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getlist();\r\n    }, []);\r\n\r\n    const CustomerDialog = (props) => {\r\n        return (\r\n            <Dialog\r\n            fullWidth={true}\r\n            maxWidth='lg'\r\n            open={props.open}\r\n            aria-labelledby=\"max-width-dialog-title\">\r\n                <DialogTitle>ข้อมูลผู้จอง (กรุณาทำการยืนยันคิว)</DialogTitle>\r\n                <ValidatorForm>\r\n                    <DialogContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={6}>\r\n                                <p style={{fontSize:20}}>ชื่อ : <span style={{color:'#3F838C'}}>{props.name}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <p style={{fontSize:20}}>วันเกิด : <span style={{color:'#3F838C'}}>{props.bdate}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <p style={{fontSize:20}}>เลขบัตรประชาชน : <span style={{color:'#3F838C'}}>{props.ssn}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <p style={{fontSize:20}}>เบอร์โทร : <span style={{color:'#3F838C'}}>{props.phone}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <p style={{fontSize:20}}>อีเมล : <span style={{color:'#3F838C'}}>{props.email}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <p style={{fontSize:20}}>สถานที่ : <span style={{color:'#3F838C'}}>{props.place}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p style={{fontSize:20}}>วันที่จอง : <span style={{color:'#3F838C'}}>{props.date}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p style={{fontSize:20}}>เวลาจอง : <span style={{color:'#3F838C'}}>{props.time}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <p style={{fontSize:20}}>อาการเบื้องต้น : <span style={{color:'#3F838C'}}>{props.detail}</span></p>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button color=\"secondary\" onClick={() =>  getSubmitUser()}>\r\n                           Submit\r\n                        </Button>\r\n                        <Button icon={Close} onClick={props.close} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </ValidatorForm>\r\n            </Dialog>\r\n        );\r\n    }\r\n\r\n    const ConfirmDelete = (props) => {\r\n        return (\r\n            <Dialog\r\n            open={props.open}\r\n            onClose={props.close}\r\n            aria-labelledby=\"max-width-dialog-title\"\r\n            >\r\n                <DialogTitle>Delete</DialogTitle>\r\n                <ValidatorForm\r\n                    onSubmit={props.close}\r\n                >\r\n                    <DialogContent>\r\n                        Confirm to delete\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button type=\"submit\" color=\"secondary\" onClick={() => deleteHandler(custId) && (customersUser.map((custUser) => deleteHandlerUser(custUser.id)))}>\r\n                           Delete\r\n                        </Button>\r\n                        <Button onClick={props.close} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </ValidatorForm>\r\n            </Dialog>\r\n        );\r\n      };\r\n      const ConfirmSubmit = (props) => {\r\n        return (\r\n            <Dialog\r\n            open={props.open}\r\n            onClose={props.close}\r\n            aria-labelledby=\"max-width-dialog-title\"\r\n            >\r\n                <DialogTitle>Submit</DialogTitle>\r\n                <ValidatorForm\r\n                >\r\n                    <DialogContent>\r\n                        Confirm to submit\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button type=\"submit\" color=\"secondary\" onClick={(e) => addCustomerHandler(e)}>\r\n                            Submit\r\n                        </Button>\r\n                        <Button onClick={props.close} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </ValidatorForm>\r\n            </Dialog>\r\n        );\r\n      };\r\n\r\n    return (\r\n            <Grid style={{width:'100%', display:'block', pading:'20px'}}>\r\n            <TableContainer component={Paper} style={{width:'100%', display:'block', alignContent:'center'}}>\r\n                <Grid container>\r\n                    <Grid item xs={8}>\r\n                        <Typography className={classes.title} variant=\"h6\" component=\"div\">\r\n                            รอการตรวจสอบคิวทั้งหมด {allReserve}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Table className={classes.table} style={{width:'100%', alignContent:'center'}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={classes.head}>Name</TableCell>\r\n                            <TableCell className={classes.head}>SSN</TableCell>\r\n                            <TableCell className={classes.head}>Phone</TableCell>\r\n                            <TableCell className={classes.head}>Place</TableCell>\r\n                            <TableCell className={classes.head}>Date</TableCell>\r\n                            <TableCell className={classes.head}>Time</TableCell>\r\n                            <TableCell className={classes.head}>Detail</TableCell>\r\n                            <TableCell className={classes.head}>Status</TableCell>\r\n                            <TableCell className={classes.head}></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {customers.length === 0 ? (\r\n                            <TableRow>\r\n                                <TableCell colSpan={7}>\r\n                                    <ScaleLoader\r\n                                        css={override}\r\n                                        size={150}\r\n                                        color={\"#eb4034\"}\r\n                                        loading={loading} />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ) : (\r\n                            <>\r\n                                {customers.map((cust) => (\r\n                                    <TableRow key={cust.id}>\r\n                                        <TableCell>{cust.name}</TableCell>\r\n                                        <TableCell>{cust.ssn}</TableCell>\r\n                                        <TableCell>{cust.phone}</TableCell>\r\n                                        <TableCell>{cust.place}</TableCell>\r\n                                        <TableCell>{cust.date}</TableCell>\r\n                                        <TableCell>{cust.time}</TableCell>\r\n                                        <TableCell>{cust.detail}</TableCell>\r\n                                        <TableCell style={{color:'#DC143C'}}>{cust.status}</TableCell>\r\n                                        <TableCell>\r\n                                            <IconButton onClick={() => getOneCustomer(cust.id)} color=\"primary\" aria-label=\"update customer\">\r\n                                                <Edit />\r\n                                            </IconButton>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n                <CustomerDialog\r\n                open={open}\r\n                close={handleClose}\r\n                formmode={formMode}\r\n                name={name}\r\n                ssn={ssn}\r\n                phone={phone}\r\n                email={email}\r\n                place={place}\r\n                date={date}\r\n                time={time}\r\n                detail={detail}\r\n                status={status}\r\n                bdate={bdate}\r\n                changeName={handleName}\r\n                changeSsn={handleSsn}\r\n                changePhone={handlePhone}\r\n                changeEmail={handleEmail}\r\n                changePlace={handlePlace}\r\n                changeDate={handleDate}\r\n                changeTime={handleTime}\r\n                changeDetail={handleDetail}\r\n                changeStatus={handleStatus}\r\n                addCustomer={addCustomerHandler}\r\n            />\r\n            <ConfirmDelete\r\n                open={conOpen}\r\n                close={handleClose}\r\n                formmode={formMode}\r\n                onSub={ConfirmSubmit}\r\n            />\r\n            <ConfirmSubmit\r\n                open={subOpen}\r\n                close={handleClose}\r\n                formmode={formMode}\r\n                addCustomer={addCustomerHandler}\r\n            />\r\n             <ConfirmDialog\r\n                open={doneOpen}\r\n                close={handleDoneClose}\r\n            />\r\n            </TableContainer>\r\n            </Grid>\r\n    );\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    table: {\r\n        minWidth: 650,\r\n        ['@media (min-width:320px)']: { \r\n            width: '100%'\r\n        },\r\n    },\r\n    container: {\r\n        marginTop: '40px',\r\n    },\r\n    title: {\r\n        flex: '1 1 100%',\r\n        padding: '20px'\r\n    },\r\n    head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        float: 'right',\r\n    },\r\n}));\r\nexport default Customers;","class Appointment {\r\n    constructor(id, firstname, lastname, phonenumber, studentID, ssn, email, time, medicalcertificate){\r\n        this.id = id;\r\n        this.firstname = firstname;\r\n        this.lastname = lastname;\r\n        this.phonenumber = phonenumber;\r\n        this.studentID = studentID;\r\n        this.ssn = ssn;\r\n        this.email = email;\r\n        this.time = time;\r\n        this.medicalcertificate = medicalcertificate;\r\n    }\r\n}\r\n\r\nexport default Appointment;","import firebase from '../helpers/db';\r\nimport Appointment from '../models/appointment';\r\nimport Login from '../authentication/Login'\r\nconst firestore = firebase.firestore();\r\n\r\nexport const getAppointments = async () => {\r\n    try {\r\n        \r\n        const response = await firestore.collection('appointments')\r\n        const data = await response.get();\r\n        let array = [];\r\n        data.forEach(doc => {\r\n            const appointment = new Appointment(\r\n                doc.id,\r\n                doc.data().firstname,\r\n                doc.data().lastname,\r\n                doc.data().phonenumber,\r\n                doc.data().studentID,\r\n                doc.data().ssn,\r\n                doc.data().email,\r\n                doc.data().time,\r\n                doc.data().medicalcertificate\r\n            );\r\n            array.push(appointment);\r\n        });\r\n        return array;\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\nexport const addAppointment = async (appointment) => {\r\n    try {\r\n        await firestore.collection('appointments').doc().set(appointment);\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const getAppointment = async (id) => {\r\n    try {\r\n        const appointment = await firestore.collection('appointments').doc(id);\r\n        const data = await appointment.get();\r\n        return data.data();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const updateAppointment = async (id, data) => {\r\n    try {\r\n        const appointment = await firestore.collection('appointments').doc(id);\r\n        await appointment.update(data)\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const deleteAppointment = async (id) => {\r\n    try {\r\n        await firestore.collection('appointments').doc(id).delete();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}","import React from \"react\";\r\nimport {Dialog, DialogActions, DialogContent, DialogTitle, Button,\r\n    Grid, FormControl, FormLabel, RadioGroup, FormControlLabel, Radio} from '@material-ui/core';\r\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\n\r\nconst AppointmentDialog = (props) => {\r\n    return (\r\n        <Dialog\r\n        fullWidth={true}\r\n        maxWidth='lg'\r\n        open={props.open}\r\n        onClose={props.close}\r\n        aria-labelledby=\"max-width-dialog-title\"\r\n        >\r\n            <DialogTitle>{props.formmode ?  'Add New' : 'Update'}  Appointment</DialogTitle>\r\n            <ValidatorForm\r\n                onSubmit={props.addAppointment}\r\n            >\r\n                <DialogContent>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                            <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            label=\"First Name\"\r\n                            onChange={props.changeFirstname}\r\n                            name=\"firstname\"\r\n                            value={props.firstname}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                            autoComplete='off'\r\n                        />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            label=\"Last Name\"\r\n                            onChange={props.changeLastname}\r\n                            name=\"lastname\"\r\n                            value={props.lastname}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                            autoComplete='off'\r\n                        />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            label=\"Student ID\"\r\n                            onChange={props.changStudentID}\r\n                            name=\"studentID\"\r\n                            value={props.studentID}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                            autoComplete='off'\r\n                        />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            label=\"SSN\"\r\n                            onChange={props.changeSSN}\r\n                            name=\"ssn\"\r\n                            value={props.ssn}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                            autoComplete='off'\r\n                        />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            label=\"Phone Number\"\r\n                            onChange={props.changephonenumber}\r\n                            name=\"phonenumber\"\r\n                            value={props.phonenumber}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                            autoComplete='off'\r\n                        />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            label=\"Email\"\r\n                            onChange={props.changeEmail}\r\n                            name=\"email\"\r\n                            value={props.email}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                            autoComplete='off'\r\n                        />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            label=\"Time\"\r\n                            onChange={props.changeTime}\r\n                            name=\"time\"\r\n                            value={props.time}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                            autoComplete='off'\r\n                        />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">Medical Certificate</FormLabel>\r\n                            <RadioGroup aria-label=\"medicalcertificate\" name=\"medicalcertificate\" value={props.medicalcertificate} onChange={props.changeCertificate}>\r\n                                <FormControlLabel value=\"Yes\" control={<Radio />} label=\"Yes\" />\r\n                                <FormControlLabel value=\"No\" control={<Radio />} label=\"No\" />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" color=\"secondary\">\r\n                       {props.formmode ? 'Add' : 'Update'}\r\n                    </Button>\r\n                    <Button onClick={props.close} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </ValidatorForm>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default AppointmentDialog;","import React , {useState, useEffect}from 'react';\r\nimport {Table, TableBody, TableCell, TableRow, TableHead,\r\n    TableContainer, Paper, makeStyles, Container,\r\n    Typography, Button, Grid, IconButton} from '@material-ui/core';\r\nimport {ScaleLoader} from 'react-spinners';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport { AddCircle, Edit, Delete } from '@material-ui/icons';\r\nimport { addAppointment, getAppointments,  getAppointment, updateAppointment, deleteAppointment} from '../data/appointmentData';\r\nimport AppointmentDialog from './AppointmentDialog';\r\nconst Appointment = () => {\r\n    const classes = useStyles();\r\n    const [appointments, setAppointments] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [formMode, setFormMode] = useState(true);\r\n    const [custId, setCustId] = useState('');\r\n    const [firstname, setFirstName] = useState('');\r\n    const [lastname, setLastName] = useState('');\r\n    const [studentID, setStudentID] = useState('');\r\n    const [ssn, setSSN] = useState('');\r\n    const [phonenumber, setPhoneNumber] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [time, setTime] = useState('');\r\n    const [medicalcertificate, setMedicalcertificate] = useState('Yes');\r\n    \r\n    const override =`\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;    \r\n        border-color: red;\r\n    `;\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n    const handleFirstName = (event) => {\r\n        setFirstName(event.target.value);\r\n    }\r\n    const handleLastName = (event) => {\r\n        setLastName(event.target.value);\r\n    }\r\n    const handleStudentID = (event) => {\r\n        setStudentID(event.target.value);\r\n    }\r\n    const handleSSN = (event) => {\r\n        setSSN(event.target.value);\r\n    }\r\n    const handlePhoneNumber = (event) => {\r\n        setPhoneNumber(event.target.value);\r\n    }\r\n    const handleEmail = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n    const handleTime = (event) => {\r\n        setTime(event.target.value);\r\n    }\r\n    const handleCertificate = (event) => {\r\n        setMedicalcertificate(event.target.value);\r\n    }\r\n    \r\n    const getlist = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const list = await getAppointments();\r\n            setAppointments(list);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const getOneAppointment = async (id) => {\r\n        try {\r\n            setFormMode(false);\r\n            setCustId(id);\r\n            const response = await getAppointment(id);\r\n            setFirstName(response.firstname);\r\n            setLastName(response.lastname);\r\n            setStudentID(response.studentID);\r\n            setSSN(response.ssn);\r\n            setPhoneNumber(response.phonenumber);\r\n            setEmail(response.email);\r\n            setTime(response.time);\r\n            setMedicalcertificate(response.medicalcertificate)\r\n            setOpen(true);\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    \r\n    const deleteHandler = async (id) => {\r\n        try {\r\n            await deleteAppointment(id);\r\n            getlist();\r\n            toast.success('Customer Deleted Successfully');\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    const handleAdd = () => {\r\n        setOpen(true);\r\n        setFormMode(true);\r\n        setFirstName('');\r\n        setLastName('');\r\n        setStudentID('');\r\n        setSSN('');\r\n        setPhoneNumber('');\r\n        setEmail('');\r\n        setTime('');\r\n        setMedicalcertificate('Yes');\r\n    }\r\n    const addAppointmentHandler = async () => {\r\n        try {\r\n            const appointment = {\r\n                firstname,\r\n                lastname,\r\n                studentID,\r\n                ssn,\r\n                phonenumber,\r\n                email,\r\n                time,\r\n                medicalcertificate\r\n            }\r\n            if (formMode) {\r\n                await addAppointment(appointment);\r\n                toast.success('Customer Added Successfully');\r\n                getlist();\r\n                setOpen(false);\r\n                setFirstName('');\r\n                setLastName('');\r\n                setStudentID('');\r\n                setSSN('');\r\n                setPhoneNumber('');\r\n                setEmail('');\r\n                setTime('');\r\n                setMedicalcertificate('Yes');\r\n            } else {\r\n                await updateAppointment(custId, appointment);\r\n                toast.success('Customer Updated Successfully');\r\n                getlist();\r\n                setOpen(false);\r\n                setFirstName('');\r\n                setLastName('');\r\n                setStudentID('');\r\n                setSSN('');\r\n                setPhoneNumber('');\r\n                setEmail('');\r\n                setTime('');\r\n                setMedicalcertificate('Yes');\r\n            }\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getlist();\r\n    }, []);\r\n    return (\r\n        <Container className={classes.container}>\r\n            <ToastContainer/>\r\n            <TableContainer component={Paper}>\r\n                <Grid container>\r\n                    <Grid item xs={8}>\r\n                    <Typography className={classes.title} variant=\"h6\" component=\"div\">\r\n                        All Appointments\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleAdd}\r\n                        className={classes.button}\r\n                        startIcon={<AddCircle/>}\r\n                    >Add</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Table className={classes.table}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={classes.head}>Full Name</TableCell>\r\n                            <TableCell className={classes.head}>Student ID</TableCell>\r\n                            <TableCell className={classes.head}>SSN</TableCell>\r\n                            <TableCell className={classes.head}>Phone Number</TableCell>\r\n                            <TableCell className={classes.head}>Email</TableCell>\r\n                            <TableCell className={classes.head}>Time</TableCell>\r\n                            <TableCell className={classes.head}>Medical Certificate</TableCell>\r\n                            <TableCell className={classes.head}>Action</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {appointments.length === 0 ? (\r\n                            <TableRow>\r\n                                <TableCell colSpan={8}>\r\n                                    <ScaleLoader\r\n                                    css={override}\r\n                                    size={150}\r\n                                    color={\"#eb4034\"}\r\n                                    loading={loading} />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ) : (\r\n                            <>\r\n                            {appointments.map((cust) => (\r\n                                <TableRow key={cust.id}>\r\n                                    <TableCell>{cust.firstname} {cust.lastname}</TableCell>\r\n                                    <TableCell>{cust.studentID}</TableCell>\r\n                                    <TableCell>{cust.ssn}</TableCell>\r\n                                    <TableCell>{cust.phonenumber}</TableCell>\r\n                                    <TableCell>{cust.email}</TableCell>\r\n                                    <TableCell>{cust.time}</TableCell>\r\n                                    <TableCell>{cust.medicalcertificate}</TableCell>\r\n                                    <TableCell>\r\n                                        <IconButton onClick={() => getOneAppointment(cust.id)} color=\"primary\" aria-label=\"update customer\">\r\n                                            <Edit />\r\n                                        </IconButton>\r\n                                        <IconButton onClick={() => deleteHandler(cust.id)} color=\"secondary\" aria-label=\"delete customer\">\r\n                                            <Delete />\r\n                                        </IconButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}    \r\n                            </>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <AppointmentDialog\r\n                open={open}\r\n                close={handleClose}\r\n                formmode={formMode}\r\n                firstname={firstname}\r\n                lastname={lastname}\r\n                studentID={studentID}\r\n                ssn={ssn}\r\n                phonenumber={phonenumber}\r\n                email={email}\r\n                time={time}\r\n                medicalcertificate={medicalcertificate}\r\n                changeFirstname={handleFirstName}\r\n                changeLastname={handleLastName}\r\n                changStudentID={handleStudentID}\r\n                changeSSN={handleSSN}\r\n                changephonenumber={handlePhoneNumber}\r\n                changeEmail={handleEmail}\r\n                changeTime={handleTime}\r\n                changeCertificate={handleCertificate}\r\n                addAppointment={addAppointmentHandler}\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    table: {\r\n        minWidth: 650,\r\n        ['@media (min-width:320px)']: { \r\n            fontSize: 10,\r\n        }\r\n    },\r\n    container: {\r\n        marginTop: '40px',\r\n        \r\n    },\r\n    title: {\r\n        flex: '1 1 100%',\r\n        padding: '20px',\r\n        \r\n        ['@media (min-width:320px)']: { \r\n            fontSize: 20,\r\n        }\r\n    },\r\n    head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        float: 'right',\r\n    },\r\n}));\r\n\r\nexport default Appointment;\r\n","export default __webpack_public_path__ + \"static/media/error.9336417a.png\";","import React from \"react\";\r\nimport { Layout } from 'antd';\r\nimport { Typography } from 'antd';\r\nimport { Button } from 'antd';\r\nimport error from '../images/error.png';\r\nimport {\r\n    Link,\r\n   \r\n  } from \"react-router-dom\";\r\nimport '../App.css'\r\n\r\nconst Errorpage = () => {\r\n    return(\r\n        <Layout id=\"error-layout\"style={{textAlign: 'center', background: '#99DFB2', alignItems: 'center'}}>\r\n            <img src={error} style={{width: 200, textAlign: 'center'}} alt=\"error\"/>\r\n            <Typography style={{}}>The page you requested could not be found</Typography>\r\n            <Layout style={{paddingTop: 10, background: '#99DFB2'}}>\r\n            <Link to ={'/admin'}><Button type=\"primary\" shape=\"round\" style={{textAlign: 'center', width: 175}}>Go to mainpage</Button></Link>\r\n            </Layout>\r\n        </Layout>\r\n    )\r\n}\r\nexport default Errorpage;","import './App.css';\r\nimport NavBar from './layouts/NavBar';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Login from './authentication/Login';\r\nimport SignUp from './authentication/SignUp';\r\nimport SignIn from './screens/SignIn'\r\nimport Customers from './screens/Customer';\r\nimport AppointDone from './screens/Appointment';\r\nimport Errorpage from './screens/Errorpage';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport { Layout } from 'antd';\r\nimport { firebase } from \"./Firebase/firebase\";\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\n\r\nconst Routers = () => (\r\n  <div>\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/admin\">\r\n          <NavBar/>\r\n          <Customers/>  \r\n        </Route>\r\n        <Route exact path=\"/appointment\">\r\n          <NavBar/>\r\n          <AppointDone/>  \r\n        </Route>\r\n        <Route>\r\n          <Errorpage/>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  </div>\r\n);\r\n\r\nfunction App() {\r\n  const [isUserSignedIn, setIsUserSignedIn] = useState(true);\r\n  firebase.auth().onAuthStateChanged((user) => {\r\n    if(user) {\r\n      return setIsUserSignedIn(true);\r\n    }\r\n\r\n    setIsUserSignedIn(false)\r\n  })\r\n  if (isUserSignedIn === true){\r\n    return (\r\n      <Router>\r\n      <section className=\"hero\">\r\n        <Layout class=\"mainLayout\">\r\n          <ReactNotification/>\r\n          <Routers/>\r\n        </Layout>\r\n      </section>\r\n      </Router>\r\n    );\r\n  } else {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={SignIn}/>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n    <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
{"version":3,"sources":["Firebase/firebase.js","layouts/NavBar.js","helpers/db.js","authentication/Login.js","authentication/SignUp.js","images/kkulogo.png","screens/AdminSignIn.js","models/customer.js","data/customerData.js","screens/ConfirmDialog.js","sendEmail/sendEmail.js","screens/Customer.js","data/appointmentData.js","screens/Appointment.js","images/error.png","screens/Errorpage.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","useStyles","makeStyles","theme","root","flexGrow","menubackgroud","background","title","NavBar","props","classes","React","useState","auth","anchorEl","Boolean","className","AppBar","position","Toolbar","Typography","variant","Button","color","onClick","signOut","to","fire","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","form","width","submit","card","paddingLeft","paddingRight","paddingBottom","pointer","cursor","Title","AdminSignIn","src","kkulogo","alt","style","height","textAlign","borderRadius","type","border","provider","GoogleAuthProvider","signInWithPopup","then","result","token","credential","accessToken","user","data","storetoken","username","displayName","email","imageurl","photoURL","userId","uid","firestore","collection","doc","set","localStorage","setItem","JSON","stringify","signin","catch","error","code","errorMessage","message","console","log","Customer","id","name","bdate","ssn","phone","place","date","time","detail","status","this","getCustomersAdmin","a","response","orderBy","get","array","forEach","customer","push","getCustomer","updateCustomerAdmin","update","deleteCustomerAdmin","delete","ConfirmDialog","Dialog","open","onClose","close","DialogTitle","DialogContent","DialogActions","init","sendconfEmail","e","preventDefault","confParams","to_name","toString","from_name","emailjs","send","text","table","minWidth","container","flex","padding","head","palette","common","black","white","button","float","Customers","customers","setCustomers","customersUser","setCustomersUser","loading","setLoading","setOpen","conOpen","setConOpen","subOpen","setSubOpen","doneOpen","setDoneOpen","formMode","setFormMode","allReserve","setAllReserve","custId","setCustId","setName","setSsn","setPhone","setEmail","setPlace","setDate","setTime","setDetail","setStatus","setBirth","handleClose","getlist","list","length","toast","getlistUser","getCustomersUser","listUser","getSubmitUser","getOneCustomer","deleteHandler","success","deleteHandlerUser","deleteCustomerUser","addCustomerHandler","map","custUser","updateCustomerUser","res","useEffect","CustomerDialog","fullWidth","maxWidth","Grid","item","xs","fontSize","icon","Close","ConfirmDelete","onSubmit","ConfirmSubmit","pading","TableContainer","component","Paper","alignContent","Table","TableHead","TableRow","TableCell","TableBody","colSpan","css","size","cust","IconButton","Edit","formmode","changeName","event","target","value","changeSsn","changePhone","changeEmail","changePlace","changeDate","changeTime","changeDetail","changeStatus","addCustomer","onSub","Errorpage","paddingTop","shape","Routers","exact","path","App","isUserSignedIn","setIsUserSignedIn","onAuthStateChanged","class","SignIn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAWEA,IAASC,cAVY,CACnBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8C,mBCsCLC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GAGdC,cAAe,CACXC,WAAY,oDAGhBC,MAAO,CACHH,SAAU,OAIHI,EAnDA,SAACC,GACZ,IAAMC,EAAUV,IAChB,EAAwBW,IAAMC,UAAS,GAAvC,mBAAOC,EAAP,KACA,GADA,KACgCF,IAAMC,SAAS,OAA/C,mBAAOE,EAAP,UACaC,QAAQD,GAarB,OACI,qBAAKE,UAAWN,EAAQP,KAAxB,SACI,cAACc,EAAA,EAAD,CAAQC,SAAS,SAASF,UAAWN,EAAQL,cAA7C,SACI,eAACc,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWN,EAAQH,MAA5C,iBAGCM,GACG,8BACI,cAACS,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS,WAXrDhC,IAASqB,OAAOY,WAWI,SAAkD,cAAC,IAAD,CAAMC,GAAG,IAAT,sF,0FCnB/DC,EAHFnC,IAASC,cAVD,CACjBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8C,mBC+HOE,aAAW,SAACC,GAAD,MAAY,CAErC0B,MAAO,CACHC,UAAW3B,EAAM4B,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJC,OAAQjC,EAAM4B,QAAQ,GACtBM,gBAAiB,WAErBC,KAAM,CACF,0BAA4B,CACxBC,MAAO,OAEXA,MAAO,OACPT,UAAW3B,EAAM4B,QAAQ,IAE7BS,OAAQ,CACJjC,WAAY,mDACZ6B,OAAQjC,EAAM4B,QAAQ,EAAG,EAAG,GAC5BP,MAAO,QAEXiB,KAAM,CACFX,UAAW,OACXY,YAAa,OACbC,aAAc,OACdC,cAAe,QAEnBC,QAAS,CACLC,OAAQ,UACRtB,MAAO,W,OChCGtB,aAAW,SAACC,GAAD,MAAY,CACrC0B,MAAO,CACH,0BAA4B,GAE5BC,UAAW3B,EAAM4B,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJC,OAAQjC,EAAM4B,QAAQ,GACtBM,gBAAiB,WAErBC,KAAM,CACF,0BAA4B,CACxBC,MAAO,OAEXA,MAAO,OACPT,UAAW3B,EAAM4B,QAAQ,IAE7BS,OAAQ,CACJjC,WAAY,mDACZ6B,OAAQjC,EAAM4B,QAAQ,EAAG,EAAG,GAC5BP,MAAO,QAEXiB,KAAM,CACFX,UAAW,OACXY,YAAa,OACbC,aAAc,OACdC,cAAe,QAEnBC,QAAS,CACLC,OAAQ,UACRtB,MAAO,W,QCxKA,MAA0B,oCCOjCuB,EAAU1B,IAAV0B,MAoEOC,EAlEK,SAACtC,GA2BnB,OACE,qBAAKO,UAAU,QAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,qBAAf,SACE,qBAAKA,UAAU,YAAYgC,IAAKC,EAASC,IAAI,cAE/C,qBAAKlC,UAAU,sBAAsBmC,MAAO,CAACC,OAAO,KAApD,SACE,cAACN,EAAD,CAAOK,MAAO,CAAEE,UAAW,UAA3B,iQAEF,qBACIF,MAAO,CACLb,MAAO,MACPgB,aAAc,QAHpB,SAME,cAAC,IAAD,CAAM5B,GAAG,SAAT,SACF,wBACE6B,KAAK,UACLJ,MAAO,CACL7C,WAAY,QACZiB,MAAO,QACPiC,OAAQ,OACRlB,MAAO,MACPgB,aAAc,OACdF,OAAQ,QAEV5B,QApDmB,WACzB,IAAMiC,EAAW,IAAIjE,IAASqB,KAAK6C,mBAC/BlE,IAASqB,OAAO8C,gBAAgBF,GAAUG,MAAK,SAACC,GAC5C,IAAMC,EAAQD,EAAOE,WAAWC,YAC1BC,EAAOJ,EAAOI,KACdC,EAAO,CACTC,WAAYL,EACZM,SAAUH,EAAKI,YACfC,MAAOL,EAAKK,MACZC,SAAUN,EAAKO,SACfC,OAAQR,EAAKS,KAELlF,IAASmF,YAAYC,WAAW,SAASC,IAAIZ,EAAKK,OACpDQ,IAAI,CACNR,MAAOL,EAAKK,QAEpBS,aAAaC,QAAQ,OAAQC,KAAKC,UAAUhB,IAC5CzD,EAAM0E,OAAOjB,MACdkB,OAAM,SAACC,GACYA,EAAMC,KAAxB,IACIC,EAAeF,EAAMG,QACbH,EAAMf,MACDe,EAAMtB,WACzB0B,QAAQC,IAAIH,OAmBd,2C,sHCpCOI,EAfX,WAAYC,EAAIC,EAAMC,EAAOC,EAAKC,EAAO1B,EAAO2B,EAAOC,EAAMC,EAAMC,EAAQC,GAAQ,oBAC/EC,KAAKV,GAAKA,EACVU,KAAKT,KAAOA,EACZS,KAAKR,MAAQA,EACbQ,KAAKP,IAAMA,EACXO,KAAKN,MAAQA,EACbM,KAAKhC,MAAQA,EACbgC,KAAKL,MAAQA,EACbK,KAAKJ,KAAOA,EACZI,KAAKH,KAAOA,EACZG,KAAKF,OAASA,EACdE,KAAKD,OAASA,GCPhB1B,EAAYnF,IAASmF,YAId4B,EAAiB,uCAAG,gCAAAC,EAAA,+EAEF7B,EAAUC,WAAW,eAFnB,cAEnB6B,EAFmB,gBAGNA,EAASC,QAAQ,SAAU,QAAQC,MAH7B,cAGnBzC,EAHmB,OAIrB0C,EAAQ,GACZ1C,EAAK2C,SAAQ,SAAAhC,GACT,IAAMiC,EAAW,IAAInB,EACjBd,EAAIe,GACJf,EAAIX,OAAO2B,KACXhB,EAAIX,OAAO4B,MACXjB,EAAIX,OAAO6B,IACXlB,EAAIX,OAAO8B,MACXnB,EAAIX,OAAOI,MACXO,EAAIX,OAAO+B,MACXpB,EAAIX,OAAOgC,KACXrB,EAAIX,OAAOiC,KACXtB,EAAIX,OAAOkC,OACXvB,EAAIX,OAAOmC,QAEfO,EAAMG,KAAKD,MAnBU,kBAqBlBF,GArBkB,uGAAH,qDAmCjBI,EAAW,uCAAG,WAAOpB,GAAP,iBAAAY,EAAA,+EAEI7B,EAAUC,WAAW,eAAeC,IAAIe,GAF5C,cAEbkB,EAFa,gBAGAA,EAASH,MAHT,cAGbzC,EAHa,yBAIZA,EAAKA,QAJO,uGAAH,sDAUX+C,EAAmB,uCAAG,WAAOrB,EAAI1B,GAAX,eAAAsC,EAAA,+EAEJ7B,EAAUC,WAAW,eAAeC,IAAIe,GAFpC,cAErBkB,EAFqB,gBAGrBA,EAASI,OAAOhD,GAHK,2HAAH,wDAiBnBiD,EAAmB,uCAAG,WAAOvB,GAAP,SAAAY,EAAA,+EAErB7B,EAAUC,WAAW,eAAeC,IAAIe,GAAIwB,SAFvB,yHAAH,sD,oCCnEnBC,EAAgB,SAAC5G,GAC1B,OACI,eAAC6G,EAAA,EAAD,CACAC,KAAM9G,EAAM8G,KACZC,QAAS/G,EAAMgH,MACf,kBAAgB,yBAHhB,UAKI,cAACC,EAAA,EAAD,2BACA,eAAC,gBAAD,WACI,cAACC,EAAA,EAAD,kDAGA,cAACC,EAAA,EAAD,UACI,cAACtG,EAAA,EAAD,CAAQE,QAASf,EAAMgH,MAAOlG,MAAM,UAApC,4B,SCfpBsG,YAAK,8BAGE,IAAMC,EAAgB,SAACC,EAAGlC,EAAMvB,GACnCyD,EAAEC,iBACF,IAAIC,EAAa,CACbC,QAASrC,EAAKsC,WACdC,UAAW,+NACX9D,MAAOA,EAAM6D,YAEjBE,IAAQC,KAAK,kBAAmB,mBAAoBL,EAAY,8BAC7DrE,MAAK,SAACC,GACH4B,QAAQC,IAAI7B,EAAO0E,SACpB,SAAClD,GACAI,QAAQC,IAAIL,EAAMkD,U,UCQtB5D,GAAYnF,IAASmF,YA8arB3E,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCsI,MAAM,aACFC,SAAU,KACT,2BAA6B,CAC1BnG,MAAO,SAGfoG,UAAW,CACP7G,UAAW,QAEftB,MAAO,CACHoI,KAAM,WACNC,QAAS,QAEbC,KAAM,CACFzG,gBAAiBlC,EAAM4I,QAAQC,OAAOC,MACtCzH,MAAOrB,EAAM4I,QAAQC,OAAOE,OAEhCC,OAAQ,CACJ/G,OAAQjC,EAAM4B,QAAQ,GACtBqH,MAAO,aAGAC,GApcG,WACd,IAAM1I,EAAUV,KAChB,EAAkCY,mBAAS,IAA3C,mBAAOyI,EAAP,KAAkBC,EAAlB,KACA,EAA0C1I,mBAAS,IAAnD,mBAAO2I,EAAP,KAAsBC,EAAtB,KACA,EAA8B5I,oBAAS,GAAvC,mBAAO6I,EAAP,KAAgBC,EAAhB,KACA,EAAwB9I,oBAAS,GAAjC,mBAAO2G,EAAP,KAAaoC,EAAb,KACA,EAA8B/I,oBAAS,GAAvC,mBAAOgJ,EAAP,KAAgBC,EAAhB,KACA,EAA8BjJ,oBAAS,GAAvC,mBAAOkJ,GAAP,KAAgBC,GAAhB,KACA,GAAgCnJ,oBAAS,GAAzC,qBAAOoJ,GAAP,MAAiBC,GAAjB,MACA,GAAgCrJ,oBAAS,GAAzC,qBAAOsJ,GAAP,MAAiBC,GAAjB,MACA,GAAoCvJ,mBAAS,IAA7C,qBAAOwJ,GAAP,MAAmBC,GAAnB,MACA,GAA4BzJ,mBAAS,IAArC,qBAAO0J,GAAP,MAAeC,GAAf,MACA,GAAwB3J,mBAAS,IAAjC,qBAAOiF,GAAP,MAAa2E,GAAb,MACA,GAAsB5J,mBAAS,IAA/B,qBAAOmF,GAAP,MAAY0E,GAAZ,MACA,GAA0B7J,mBAAS,IAAnC,qBAAOoF,GAAP,MAAc0E,GAAd,MACA,GAA0B9J,mBAAS,IAAnC,qBAAO0D,GAAP,MAAcqG,GAAd,MACA,GAA0B/J,mBAAS,IAAnC,qBAAOqF,GAAP,MAAc2E,GAAd,MACA,GAAwBhK,mBAAS,IAAjC,qBAAOsF,GAAP,MAAa2E,GAAb,MACA,GAAwBjK,mBAAS,IAAjC,qBAAOuF,GAAP,MAAa2E,GAAb,MACA,GAA4BlK,mBAAS,IAArC,qBAAOwF,GAAP,MAAe2E,GAAf,MACA,GAA4BnK,mBAAS,IAArC,qBAAOyF,GAAP,MAAe2E,GAAf,MACA,GAA0BpK,mBAAS,IAAnC,qBAAOkF,GAAP,MAAcmF,GAAd,MAOMC,GAAc,WAChBvB,GAAQ,GACRE,GAAW,GACXE,IAAW,IAgCToB,GAAO,uCAAG,4BAAA3E,EAAA,sEAERkD,GAAW,GAFH,SAGWnD,IAHX,OAGF6E,EAHE,OAIR9B,EAAa8B,GACbf,GAAce,EAAKC,QACnB3B,GAAW,GANH,kDAQR4B,IAAMjG,MAAM,KAAMG,SAClBkE,GAAW,GATH,0DAAH,qDAYP6B,GAAW,uCAAG,4BAAA/E,EAAA,+EAEWgF,KAFX,OAENC,EAFM,OAGZjC,EAAiBiC,GACjB5B,GAAW,GAJC,gDAMZyB,IAAMjG,MAAM,KAAMG,SAClBkE,GAAW,GAPC,yDAAH,qDAUXgC,GAAa,uCAAG,4BAAAlF,EAAA,+EAESgF,KAFT,OAERC,EAFQ,OAGdjC,EAAiBiC,GACjB1B,IAAW,GAJG,gDAMduB,IAAMjG,MAAM,KAAMG,SAClBkE,GAAW,GAPG,yDAAH,qDAUb8B,GAAgB,uCAAG,gCAAAhF,EAAA,+EAEM7B,GAAUC,WAAW,SAAWN,GAAM6D,WAAa,UAFzD,cAEX1B,EAFW,gBAGEA,EAASE,MAHX,cAGXzC,EAHW,OAIb0C,EAAQ,GACZ1C,EAAK2C,SAAQ,SAAAhC,GACT,IAAMiC,EAAW,IAAInB,EACjBd,EAAIe,GACJf,EAAIX,OAAO2B,KACXhB,EAAIX,OAAO4B,MACXjB,EAAIX,OAAO6B,IACXlB,EAAIX,OAAO8B,MACXnB,EAAIX,OAAOI,MACXO,EAAIX,OAAO+B,MACXpB,EAAIX,OAAOgC,KACXrB,EAAIX,OAAOiC,KACXtB,EAAIX,OAAOkC,OACXvB,EAAIX,OAAOmC,QAEfO,EAAMG,KAAKD,MAnBE,kBAqBVF,GArBU,uGAAH,qDA0BhB+E,GAAc,uCAAG,WAAO/F,GAAP,eAAAY,EAAA,sEAEf2D,IAAY,GACZI,GAAU3E,GAHK,SAIQoB,EAAYpB,GAJpB,OAITa,EAJS,OAKf+D,GAAQ/D,EAASZ,MACjB4E,GAAOhE,EAASV,KAChB2E,GAASjE,EAAST,OAClB2E,GAASlE,EAASnC,OAClBsG,GAASnE,EAASR,OAClB4E,GAAQpE,EAASP,MACjB4E,GAAQrE,EAASN,MACjB4E,GAAUtE,EAASL,QACnB4E,GAAUvE,EAASJ,QACnB4E,GAASxE,EAASX,OAClB6D,GAAQ,GAfO,kDAiBf2B,IAAMjG,MAAM,KAAMG,SAjBH,0DAAH,sDAoBdoG,GAAa,uCAAG,WAAOhG,GAAP,SAAAY,EAAA,+EAERW,EAAoBvB,GAFZ,OAGdiE,GAAW,GACXsB,KACAG,IAAMO,QAAQ,iCALA,gDAOdP,IAAMjG,MAAM,KAAMG,SAPJ,yDAAH,sDAUbsG,GAAiB,uCAAG,WAAOlG,GAAP,SAAAY,EAAA,+EAEZuF,GAAmBnG,GAFP,OAGlBiE,GAAW,GACXsB,KAJkB,gDAMlBG,IAAMjG,MAAM,KAAMG,SANA,yDAAH,sDASjBwG,GAAkB,uCAAG,WAAOjE,GAAP,eAAAvB,EAAA,sEAEN,qEACPM,EAAW,CACbjB,QACAC,SACAC,OACAC,SACA1B,SACA2B,SACAC,QACAC,QACAC,UACAC,OAXS,sEAabkD,EAAc0C,KAAI,SAACC,GAAD,OAClBC,GAAmBD,EAAStG,GAAIkB,MAhBb,SAiBbG,EAAoBqD,GAAQxD,GAjBf,OAkBnBwE,IAAMO,QAAQ,iCACdlC,GAAQ,GACRI,IAAW,GACXoB,KACArD,EAAcC,EAAGlC,GAAMvB,IACvB2F,IAAY,GACZO,GAAQ,IACRS,GAAS,IACTR,GAAO,IACPC,GAAS,IACTC,GAAS,IACTC,GAAS,IACTC,GAAQ,IACRC,GAAQ,IACRC,GAAU,IACVC,GAAU,IAjCS,kDAoCnBM,IAAMjG,MAAM,KAAMG,SApCC,0DAAH,sDAuClB2G,GAAkB,uCAAG,WAAOvG,EAAI1B,GAAX,iBAAAsC,EAAA,+EAEDQ,EAAYsD,IAFX,cAEb8B,EAFa,OAGnBzB,GAASyB,EAAI9H,OAHM,SAIIK,GAAUC,WAAW,SAAWN,GAAM6D,WAAa,UAAUtD,IAAIe,GAJrE,cAIbkB,EAJa,iBAKbA,EAASI,OAAOhD,GALH,+HAAH,wDAUlB6H,GAAkB,uCAAG,WAAOnG,GAAP,SAAAY,EAAA,+EAEb7B,GAAUC,WAAW,SAAWN,GAAM6D,WAAa,UAAUtD,IAAIe,GAAIwB,SAFxD,yHAAH,sDAOxBiF,qBAAU,WACNlB,OACD,IAEH,IAAMmB,GAAiB,SAAC7L,GACpB,OACI,eAAC6G,EAAA,EAAD,CACAiF,WAAW,EACXC,SAAS,KACTjF,KAAM9G,EAAM8G,KACZ,kBAAgB,yBAJhB,UAKI,cAACG,EAAA,EAAD,8BACA,eAAC,gBAAD,WACI,cAACC,EAAA,EAAD,UACI,eAAC8E,EAAA,EAAD,CAAM/D,WAAS,EAAC5G,QAAS,EAAzB,UACI,cAAC2K,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,oBAAGxJ,MAAO,CAACyJ,SAAS,IAApB,wCAAgC,sBAAMzJ,MAAO,CAAC5B,MAAM,WAApB,SAAiCd,EAAMoF,YAE3E,cAAC4G,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,oBAAGxJ,MAAO,CAACyJ,SAAS,IAApB,oGAA0C,sBAAMzJ,MAAO,CAAC5B,MAAM,WAApB,SAAiCd,EAAMsF,WAErF,cAAC0G,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,oBAAGxJ,MAAO,CAACyJ,SAAS,IAApB,gEAAoC,sBAAMzJ,MAAO,CAAC5B,MAAM,WAApB,SAAiCd,EAAMuF,aAE/E,cAACyG,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,oBAAGxJ,MAAO,CAACyJ,SAAS,IAApB,8CAAiC,sBAAMzJ,MAAO,CAAC5B,MAAM,WAApB,SAAiCd,EAAM6D,aAE5E,cAACmI,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,oBAAGxJ,MAAO,CAACyJ,SAAS,IAApB,0DAAmC,sBAAMzJ,MAAO,CAAC5B,MAAM,WAApB,SAAiCd,EAAMwF,aAE9E,cAACwG,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,oBAAGxJ,MAAO,CAACyJ,SAAS,IAApB,sEAAqC,sBAAMzJ,MAAO,CAAC5B,MAAM,WAApB,SAAiCd,EAAMyF,YAEhF,cAACuG,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,oBAAGxJ,MAAO,CAACyJ,SAAS,IAApB,0DAAmC,sBAAMzJ,MAAO,CAAC5B,MAAM,WAApB,SAAiCd,EAAM0F,YAE9E,cAACsG,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,oBAAGxJ,MAAO,CAACyJ,SAAS,IAApB,oGAA0C,sBAAMzJ,MAAO,CAAC5B,MAAM,WAApB,SAAiCd,EAAM2F,mBAI7F,eAACwB,EAAA,EAAD,WACI,cAACtG,EAAA,EAAD,CAAQC,MAAM,MAAMC,QAAS,kBAAOkK,MAApC,oBAGA,cAACpK,EAAA,EAAD,CAAQiC,KAAK,SAAShC,MAAM,YAAYC,QAAS,kBAAO+J,MAAxD,oBAGA,cAACjK,EAAA,EAAD,CAAQuL,KAAMC,KAAOtL,QAASf,EAAMgH,MAAOlG,MAAM,UAAjD,6BASdwL,GAAgB,SAACtM,GACnB,OACI,eAAC6G,EAAA,EAAD,CACAC,KAAM9G,EAAM8G,KACZC,QAAS/G,EAAMgH,MACf,kBAAgB,yBAHhB,UAKI,cAACC,EAAA,EAAD,qBACA,eAAC,gBAAD,CACIsF,SAAUvM,EAAMgH,MADpB,UAGI,cAACE,EAAA,EAAD,gCAGA,eAACC,EAAA,EAAD,WACI,cAACtG,EAAA,EAAD,CAAQiC,KAAK,SAAShC,MAAM,YAAYC,QAAS,kBAAM+H,EAAc0C,KAAI,SAACC,GAAD,OAAeN,GAActB,KAAawB,GAAkBI,EAAStG,QAA9I,oBAGA,cAACtE,EAAA,EAAD,CAAQE,QAASf,EAAMgH,MAAOlG,MAAM,UAApC,6BAQZ0L,GAAgB,SAACxM,GACrB,OACI,eAAC6G,EAAA,EAAD,CACAC,KAAM9G,EAAM8G,KACZC,QAAS/G,EAAMgH,MACf,kBAAgB,yBAHhB,UAKI,cAACC,EAAA,EAAD,qBACA,eAAC,gBAAD,WAEI,cAACC,EAAA,EAAD,gCAGA,eAACC,EAAA,EAAD,WACI,cAACtG,EAAA,EAAD,CAAQiC,KAAK,SAAShC,MAAM,YAAYC,QAAS,SAACuG,GAAD,OAAOiE,GAAmBjE,IAA3E,oBAGA,cAACzG,EAAA,EAAD,CAAQE,QAASf,EAAMgH,MAAOlG,MAAM,UAApC,6BASpB,OACQ,cAACkL,EAAA,EAAD,CAAMtJ,MAAO,CAACb,MAAM,OAAQP,QAAQ,QAASmL,OAAO,QAApD,SACA,eAACC,EAAA,EAAD,CAAgBC,UAAWC,IAAOlK,MAAO,CAACb,MAAM,OAAQP,QAAQ,QAASuL,aAAa,UAAtF,UACI,cAACb,EAAA,EAAD,CAAM/D,WAAS,EAAf,SACI,cAAC+D,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,eAACvL,EAAA,EAAD,CAAYJ,UAAWN,EAAQH,MAAOc,QAAQ,KAAK+L,UAAU,MAA7D,0EACgBhD,UAIxB,eAACmD,EAAA,EAAD,CAAOvM,UAAWN,EAAQ8H,MAAOrF,MAAO,CAACb,MAAM,OAAQgL,aAAa,UAApE,UACI,cAACE,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAW1M,UAAWN,EAAQmI,KAA9B,kBACA,cAAC6E,EAAA,EAAD,CAAW1M,UAAWN,EAAQmI,KAA9B,iBACA,cAAC6E,EAAA,EAAD,CAAW1M,UAAWN,EAAQmI,KAA9B,mBACA,cAAC6E,EAAA,EAAD,CAAW1M,UAAWN,EAAQmI,KAA9B,mBACA,cAAC6E,EAAA,EAAD,CAAW1M,UAAWN,EAAQmI,KAA9B,kBACA,cAAC6E,EAAA,EAAD,CAAW1M,UAAWN,EAAQmI,KAA9B,kBACA,cAAC6E,EAAA,EAAD,CAAW1M,UAAWN,EAAQmI,KAA9B,oBACA,cAAC6E,EAAA,EAAD,CAAW1M,UAAWN,EAAQmI,KAA9B,oBACA,cAAC6E,EAAA,EAAD,CAAW1M,UAAWN,EAAQmI,YAGtC,cAAC8E,EAAA,EAAD,UAC0B,IAArBtE,EAAUgC,OACP,cAACoC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAWE,QAAS,EAApB,SACI,cAAC,cAAD,CACIC,IA5UtB,iIA6UsBC,KAAM,IACNvM,MAAO,UACPkI,QAASA,QAIrB,mCACKJ,EAAU4C,KAAI,SAAC8B,GAAD,OACX,eAACN,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAAYK,EAAKlI,OACjB,cAAC6H,EAAA,EAAD,UAAYK,EAAKhI,MACjB,cAAC2H,EAAA,EAAD,UAAYK,EAAK/H,QACjB,cAAC0H,EAAA,EAAD,UAAYK,EAAK9H,QACjB,cAACyH,EAAA,EAAD,UAAYK,EAAK7H,OACjB,cAACwH,EAAA,EAAD,UAAYK,EAAK5H,OACjB,cAACuH,EAAA,EAAD,UAAYK,EAAK3H,SACjB,cAACsH,EAAA,EAAD,UAAYK,EAAK1H,SACjB,cAACqH,EAAA,EAAD,UACI,cAACM,EAAA,EAAD,CAAYxM,QAAS,kBAAMmK,GAAeoC,EAAKnI,KAAKrE,MAAM,UAAU,aAAW,kBAA/E,SACI,cAAC0M,EAAA,EAAD,UAXGF,EAAKnI,cAoBxC,cAAC0G,GAAD,CACA/E,KAAMA,EACNE,MAAOyD,GACPgD,SAAUhE,GACVrE,KAAMA,GACNE,IAAKA,GACLC,MAAOA,GACP1B,MAAOA,GACP2B,MAAOA,GACPC,KAAMA,GACNC,KAAMA,GACNC,OAAQA,GACRC,OAAQA,GACRP,MAAOA,GACPqI,WA1WO,SAACC,GAChB5D,GAAQ4D,EAAMC,OAAOC,QA0WbC,UAxWM,SAACH,GACf3D,GAAO2D,EAAMC,OAAOC,QAwWZE,YAtWQ,SAACJ,GACjB1D,GAAS0D,EAAMC,OAAOC,QAsWdG,YA3VQ,SAACL,GACjBtD,GAAQsD,EAAMC,OAAOC,QA2VbI,YArWQ,SAACN,GACjBzD,GAASyD,EAAMC,OAAOC,QAqWdK,WAnWO,SAACP,GAChBxD,GAASwD,EAAMC,OAAOC,QAmWdM,WAjWO,SAACR,GAChBvD,GAAQuD,EAAMC,OAAOC,QAiWbO,aA5VS,SAACT,GAClBtD,GAAQsD,EAAMC,OAAOC,QA4VbQ,aA1VS,SAACV,GAClBpD,GAAUoD,EAAMC,OAAOC,QA0VfS,YAAa/C,KAEjB,cAACe,GAAD,CACIxF,KAAMqC,EACNnC,MAAOyD,GACPgD,SAAUhE,GACV8E,MAAO/B,GACPxB,SAAUF,KAEd,cAAC0B,GAAD,CACI1F,KAAMuC,GACNrC,MAAOyD,GACPgD,SAAUhE,GACV6E,YAAa/C,KAEhB,cAAC,EAAD,CACGzE,KAAMyC,GACNvC,MAtYY,kBAAMwC,IAAY,Y,kBCvD5BzK,EAASmF,Y,4BCyPT1E,aAAW,SAACC,GAAD,MAAY,CACrCsI,MAAM,aACFC,SAAU,KACT,2BAA6B,CAC1BmE,SAAU,KAGlBlE,UAAW,CACP7G,UAAW,QAGftB,MAAM,aACFoI,KAAM,WACNC,QAAS,QAER,2BAA6B,CAC1BgE,SAAU,KAGlB/D,KAAM,CACFzG,gBAAiBlC,EAAM4I,QAAQC,OAAOC,MACtCzH,MAAOrB,EAAM4I,QAAQC,OAAOE,OAEhCC,OAAQ,CACJ/G,OAAQjC,EAAM4B,QAAQ,GACtBqH,MAAO,a,kBCrRA,OAA0B,kCCsB1B8F,GAXG,WACd,OACI,eAAC,KAAD,CAAQrJ,GAAG,eAAczC,MAAO,CAACE,UAAW,SAAU/C,WAAY,UAAW2B,WAAY,UAAzF,UACI,qBAAKe,IAAKqC,GAAOlC,MAAO,CAACb,MAAO,IAAKe,UAAW,UAAWH,IAAI,UAC/D,cAAC,IAAD,CAAYC,MAAO,GAAnB,uDACA,cAAC,KAAD,CAAQA,MAAO,CAAC+L,WAAY,GAAI5O,WAAY,WAA5C,SACA,cAAC,IAAD,CAAMoB,GAAK,QAAX,SAAoB,cAAC,KAAD,CAAQ6B,KAAK,UAAU4L,MAAM,QAAQhM,MAAO,CAACE,UAAW,SAAUf,MAAO,KAAzE,oC,SCA1B8M,GAAU,kBACd,8BACE,cAAC,IAAD,UACE,eAAC,KAAD,WACE,eAAC,KAAD,CAAOC,OAAK,EAACC,KAAK,SAAlB,UACE,cAAC,EAAD,IACA,cAAC,GAAD,OAEF,cAAC,KAAD,UACE,cAAC,GAAD,cAoCKC,OA7Bf,WACE,MAA4C3O,oBAAS,GAArD,mBAAO4O,EAAP,KAAuBC,EAAvB,KAQA,OAPAjQ,IAASqB,OAAO6O,oBAAmB,SAACzL,GAClC,GAAGA,EACD,OAAOwL,GAAkB,GAG3BA,GAAkB,OAEG,IAAnBD,EAEA,yBAASxO,UAAU,OAAnB,SACE,cAAC,KAAD,CAAQ2O,MAAM,aAAd,SACE,cAAC,GAAD,QAMJ,cAAC,IAAD,UACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAON,OAAK,EAACC,KAAK,IAAIlC,UAAWwC,SC1C5BC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnM,MAAK,YAAkD,IAA/CoM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACA,cAAC,GAAD,QAGFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.fbdea32f.chunk.js","sourcesContent":["import firebase from 'firebase/compat'\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCevvv7f0Y4MB1CPmPS9YObfO345q9Cpt4\",\r\n    authDomain: \"reactlogin-24c53.firebaseapp.com\",\r\n    projectId: \"reactlogin-24c53\",\r\n    storageBucket: \"reactlogin-24c53.appspot.com\",\r\n    messagingSenderId: \"688572760293\",\r\n    appId: \"1:688572760293:web:c3659ad0a8a7f397a8540c\"\r\n  };\r\n\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  export {firebase};","import React from \"react\";\r\nimport { AppBar, Toolbar, IconButton, Typography, Menu, MenuItem, makeStyles, Button } from '@material-ui/core';\r\nimport { AccountCircle } from '@material-ui/icons';\r\nimport { firebase } from \"../Firebase/firebase\";\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nconst NavBar = (props) => {\r\n    const classes = useStyles();\r\n    const [auth, setAuth] = React.useState(true);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleClose = () => {\r\n        localStorage.removeItem('user');\r\n        props.setUserState();\r\n        setAnchorEl(null);\r\n    }\r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const signOut = () => {\r\n        firebase.auth().signOut();\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\" className={classes.menubackgroud}>\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        APU\r\n                    </Typography>\r\n                    {auth && (\r\n                        <div>\r\n                            <Button color=\"inherit\" onClick={() => signOut()}><Link to=\"/\">\r\n                                ออกจากระบบ\r\n                            </Link></Button> \r\n                        </div>\r\n                    )}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        \r\n    },\r\n    menubackgroud: {\r\n        background: 'linear-gradient(45deg, #3F838C 30%, #99DFB2 90%)',\r\n        \r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    }\r\n}));\r\n\r\nexport default NavBar;","import firebase from 'firebase/compat';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCevvv7f0Y4MB1CPmPS9YObfO345q9Cpt4\",\r\n    authDomain: \"reactlogin-24c53.firebaseapp.com\",\r\n    projectId: \"reactlogin-24c53\",\r\n    storageBucket: \"reactlogin-24c53.appspot.com\",\r\n    messagingSenderId: \"688572760293\",\r\n    appId: \"1:688572760293:web:c3659ad0a8a7f397a8540c\"\r\n};\r\n    \r\n// Initialize Firebase\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport default fire;","import React, { useState } from 'react';\r\nimport {Container, CssBaseline, Avatar, Typography, FormControlLabel,\r\n    Button, Checkbox, Grid, Link, makeStyles, Card, CardContent} from '@material-ui/core';\r\nimport { LockRounded } from '@material-ui/icons';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport fire from '../helpers/db';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport {ScaleLoader} from 'react-spinners';\r\n\r\nconst Login = (props) => {\r\n    const classes = useStyles();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [rememberme, setRememberMe] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const override = `\r\n        display: block;\r\n        margin-left: 100px;\r\n        border-color: red;\r\n    `;\r\n    const handleEmail = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n    const handlePassword = (event) => {\r\n        setPassword(event.target.value);\r\n    }\r\n    const handleCheck = (event) => {\r\n        setRememberMe(event.target.checked);\r\n    }\r\n    const handlerLogin = () => {\r\n        setLoading(true);\r\n        fire.auth()\r\n            .signInWithEmailAndPassword(email, password)\r\n            .then(response => {\r\n                const {user} =  response;\r\n                const data = {\r\n                    userId: user.uid,\r\n                    email: user.email\r\n                }\r\n                var users = fire.firestore().collection(\"users\").doc(user.uid);\r\n                users.set({\r\n                    email: user.email,\r\n                    id: user.uid\r\n                })\r\n                localStorage.setItem('user', JSON.stringify(data));\r\n                const storage = localStorage.getItem('user');\r\n                const loggedInUser = storage !== null ? JSON.parse(storage) : null;\r\n                props.loggedIn(loggedInUser);\r\n                setLoading(false);\r\n            }).catch(error => {\r\n                toast.error(error.message);\r\n                setLoading(false);\r\n            });\r\n}\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Card className={classes.card}>\r\n                <CardContent>\r\n                    <ToastContainer/>\r\n                    <CssBaseline />\r\n                    <div className={classes.paper}>\r\n                        <Avatar className={classes.avatar}>\r\n                            <LockRounded />\r\n                        </Avatar>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Sign In\r\n                        </Typography>\r\n                        <ValidatorForm\r\n                            onSubmit={handlerLogin}\r\n                            onError={errors => {\r\n                                for (const err of errors) {\r\n                                    console.log(err.props.errorMessages[0])\r\n                                }\r\n                            }}\r\n\r\n                            className={classes.form}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                fullWidth\r\n                                label=\"Email\"\r\n                                onChange={handleEmail}\r\n                                name=\"email\"\r\n                                value={email}\r\n                                validators={['required', 'isEmail']}\r\n                                errorMessages={['this field is required', 'email is not valid']}\r\n                                autoComplete='off' />\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Password\"\r\n                                onChange={handlePassword}\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                value={password}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Checkbox value={rememberme} onChange={(e) => handleCheck(e)} color=\"primary\" />}\r\n                                label=\"Remember me\"\r\n                            />\r\n                            {loading ? (\r\n                                <ScaleLoader\r\n                                css={override}\r\n                                size={150}\r\n                                color={\"#eb4034\"}\r\n                                loading={loading}/>\r\n                            ) : (\r\n                                    <Button\r\n                                    type=\"submit\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    className={classes.submit}\r\n                                >\r\n                                Sign In\r\n                            </Button>\r\n                            )}\r\n                            \r\n                            <Grid container>\r\n                                <Grid item>\r\n                                    <Link onClick={props.toggle} className={classes.pointer} variant=\"body2\">\r\n                                        {\"Don't have an account? Sign Up\"}\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ValidatorForm>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    \r\n    paper: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: '#3F838C'\r\n    },\r\n    form: {\r\n        '@media(minWidth: 568px)' : {\r\n            width: '50%'\r\n        },\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        background: 'linear-gradient(45deg, #3F838C 30%, #99DFB2 90%)',\r\n        margin: theme.spacing(3, 0, 2),\r\n        color: '#fff'\r\n    },\r\n    card: {\r\n        marginTop: '60px',\r\n        paddingLeft: '20px',\r\n        paddingRight: '20px',\r\n        paddingBottom: '20px',\r\n    },\r\n    pointer: {\r\n        cursor: 'pointer',\r\n        color: 'red'\r\n    }\r\n}));\r\n\r\nexport default Login;","import React, {useEffect, useState} from 'react';\r\nimport {Container, CssBaseline, Avatar, Typography, \r\n    Button, Grid, Link, makeStyles, Card, CardContent} from '@material-ui/core';\r\nimport {LockRounded} from '@material-ui/icons';\r\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport fire from '../helpers/db';\r\nimport firebase from '../helpers/db';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst SignUp = (props) => {\r\n    const classes = useStyles();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const handleEmail = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n    const handlePassword = (event) => {\r\n        setPassword(event.target.value);\r\n    }\r\n    const handleConfirmPassowerd = (event) => {\r\n        setConfirmPassword(event.target.value);\r\n    }\r\n    \r\n    const handleSignUp = () => {\r\n        fire.auth()\r\n            .createUserWithEmailAndPassword(email, password)\r\n            .then(response => {\r\n                if(response) {\r\n                    props.toggle();\r\n                    toast.success('User Registered Successfully');                    \r\n                }\r\n            }).catch((error) => {\r\n                switch (error.code) {\r\n                    case 'auth/email-already-in-use':\r\n                        toast.error(error.message);\r\n                        break;\r\n                    case 'auth/invalid-email': \r\n                        toast.error(error.message);                    \r\n                        break;\r\n                    case 'auth/weak-password':\r\n                        toast.error(error.message);\r\n                        break;\r\n                }\r\n            });      \r\n    }\r\n    useEffect(() => {\r\n        ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\r\n            if(value !== password) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return () => {\r\n            ValidatorForm.removeValidationRule('isPasswordMatch');\r\n        }\r\n    }, [password])\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Card className={classes.card}>\r\n                <CardContent>\r\n                    <ToastContainer />\r\n                    <CssBaseline />\r\n                    <div className={classes.paper}>\r\n                        <Avatar className={classes.avatar}>\r\n                            <LockRounded />\r\n                        </Avatar>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Sign Up\r\n                        </Typography>\r\n                        <ValidatorForm\r\n                            onSubmit={handleSignUp}\r\n                            className={classes.form}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                fullWidth\r\n                                label=\"Email\"\r\n                                onChange={handleEmail}\r\n                                name=\"email\"\r\n                                value={email}\r\n                                validators={['required', 'isEmail']}\r\n                                errorMessages={['this field is required', 'email is not valid']}\r\n                                autoComplete='off'\r\n                            />\r\n                            <br />\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                label=\"Password\"\r\n                                onChange={handlePassword}\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                value={password}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <br />\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                label=\"Confirm password\"\r\n                                fullWidth\r\n                                onChange={handleConfirmPassowerd}\r\n                                name=\"confirmPassword\"\r\n                                type=\"password\"\r\n                                validators={['isPasswordMatch', 'required']}\r\n                                errorMessages={['password mismatch', 'this field is required']}\r\n                                value={confirmPassword}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                className={classes.submit}\r\n                            >\r\n                                Sign Up\r\n                            </Button>\r\n                            <Grid container>\r\n                                <Grid item>\r\n                                    <Link onClick={props.toggle} className={classes.pointer} variant=\"body2\">\r\n                                        {\"Already have an account? Sign In\"}\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ValidatorForm>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        '@media(minWidth: 568px)' : {\r\n        },\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: '#3F838C'\r\n    },\r\n    form: {\r\n        '@media(minWidth: 568px)' : {\r\n            width: '50%',\r\n        },\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        background: 'linear-gradient(45deg, #3F838C 30%, #99DFB2 90%)',\r\n        margin: theme.spacing(3, 0, 2),\r\n        color: '#fff'\r\n    },\r\n    card: {\r\n        marginTop: '60px',\r\n        paddingLeft: '20px',\r\n        paddingRight: '20px',\r\n        paddingBottom: '20px',\r\n    },\r\n    pointer: {\r\n        cursor: 'pointer',\r\n        color: 'red'\r\n    }\r\n}))\r\nexport default SignUp;","export default __webpack_public_path__ + \"static/media/kkulogo.cb762e90.png\";","import React from \"react\";\r\nimport { firebase } from \"../Firebase/firebase\";\r\nimport { Typography } from 'antd';\r\nimport kkulogo from '../images/kkulogo.png';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nconst { Title } = Typography;\r\n\r\nconst AdminSignIn = (props) => {\r\n  const SignInWithFirebase = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n        firebase.auth().signInWithPopup(provider).then((result) => {\r\n            const token = result.credential.accessToken;\r\n            const user = result.user;\r\n            const data = {\r\n                storetoken: token,\r\n                username: user.displayName,\r\n                email: user.email,\r\n                imageurl: user.photoURL,\r\n                userId: user.uid\r\n            }\r\n            var users = firebase.firestore().collection(\"users\").doc(user.email);\r\n                users.set({\r\n                    email: user.email,\r\n            })\r\n            localStorage.setItem('user', JSON.stringify(data));\r\n            props.signin(data);\r\n        }).catch((error) => {\r\n            const errorCode = error.code;\r\n          const errorMessage = error.message;\r\n          const email = error.email;\r\n          const credential = error.credential;\r\n          console.log(errorMessage);\r\n        });\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"loginContainer\">\r\n        <div className=\"loginLogoContainer\">\r\n          <img className=\"loginlogo\" src={kkulogo} alt=\"kkulogo\"/>\r\n        </div>\r\n        <div className=\"loginTitleContainer\" style={{height:100}}>\r\n          <Title style={{ textAlign: 'center'}}>ระบบบริการหน่วยปฐมภูมิ มหาวิทยาลัยขอนแก่น</Title>\r\n        </div>\r\n        <div \r\n            style={{\r\n              width: \"95%\",\r\n              borderRadius: \"20px\",\r\n            }}\r\n        >\r\n          <Link to=\"/admin\">\r\n        <button\r\n          type=\"primary\"\r\n          style={{\r\n            background: \"green\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            width: \"95%\",\r\n            borderRadius: \"20px\",\r\n            height: '50px'\r\n          }}\r\n          onClick={SignInWithFirebase}\r\n        >\r\n          Login using kkumail\r\n        </button>\r\n        </Link>\r\n        </div>\r\n\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminSignIn;\r\n","class Customer {\r\n    constructor(id, name, bdate, ssn, phone, email, place, date, time, detail, status){\r\n        this.id = id;\r\n        this.name = name\r\n        this.bdate = bdate;\r\n        this.ssn = ssn;\r\n        this.phone = phone;\r\n        this.email = email;\r\n        this.place = place;\r\n        this.date = date;\r\n        this.time = time;\r\n        this.detail = detail;\r\n        this.status = status\r\n    }\r\n}\r\n\r\nexport default Customer;","import { firebase } from \"../Firebase/firebase\";\r\nimport Customer from '../models/customer';\r\nimport customersUser from '../screens/Customer';\r\nimport email from '../screens/Customer';\r\n\r\nconst firestore = firebase.firestore();\r\n\r\n\r\n\r\nexport const getCustomersAdmin = async () => {\r\n    try {\r\n        const response = await firestore.collection('appointment');\r\n        const data = await response.orderBy('status', 'desc').get();\r\n        let array = [];\r\n        data.forEach(doc => {\r\n            const customer = new Customer(\r\n                doc.id,\r\n                doc.data().name,\r\n                doc.data().bdate,\r\n                doc.data().ssn,\r\n                doc.data().phone,\r\n                doc.data().email,\r\n                doc.data().place,\r\n                doc.data().date,\r\n                doc.data().time,\r\n                doc.data().detail,\r\n                doc.data().status\r\n            );\r\n            array.push(customer);\r\n        });\r\n        return array;\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const addCustomer = async (customer) => {\r\n    try {\r\n        await firestore.collection('appointment').doc().set(customer);\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const getCustomer = async (id) => {\r\n    try {\r\n        const customer = await firestore.collection('appointment').doc(id);\r\n        const data = await customer.get();\r\n        return data.data();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const updateCustomerAdmin = async (id, data) => {\r\n    try {\r\n        const customer = await firestore.collection('appointment').doc(id);\r\n        await customer.update(data);\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const updateCustomerUser = async (id, data) => {\r\n    try {\r\n        const customer = await firestore.collection('users/' + email.toString() + '/custo').doc(id);\r\n        await customer.update(data);\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const deleteCustomerAdmin = async (id) => {\r\n    try {\r\n        await firestore.collection('appointment').doc(id).delete();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const deleteCustomerUser = async (id) => {\r\n    try {\r\n        await firestore.collection('users/' + email.toString() + '/custo').doc(id).delete();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}","import React from 'react';\r\nimport {Dialog, DialogActions, DialogContent, DialogTitle, Button,} from '@material-ui/core';\r\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\n\r\nexport const ConfirmDialog = (props) => {\r\n    return (\r\n        <Dialog\r\n        open={props.open}\r\n        onClose={props.close}\r\n        aria-labelledby=\"max-width-dialog-title\"\r\n        >\r\n            <DialogTitle>Submit Done!</DialogTitle>\r\n            <ValidatorForm>\r\n                <DialogContent>\r\n                    Send email confirm to user already!\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={props.close} color=\"primary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </ValidatorForm>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default ConfirmDialog;","import{ init } from 'emailjs-com';\r\nimport emailjs from 'emailjs-com';\r\ninit(\"user_5ZCFqcLFXuPKqlVx03Cus\");\r\n// npm install emailjs-com\r\n// invoke in onClick ex.: onClick={sendconfEmail}\r\nexport const sendconfEmail = (e, name, email) => {\r\n    e.preventDefault();\r\n    var confParams = {\r\n        to_name: name.toString(),\r\n        from_name: 'หน่วยบริการปฐมภูมิ123 มหาวิทยาลัยขอนแก่น',\r\n        email: email.toString()\r\n      };\r\n    emailjs.send('service_zn0xihe', 'template_88jjem7', confParams, 'user_5ZCFqcLFXuPKqlVx03Cus')\r\n      .then((result) => {\r\n          console.log(result.text);\r\n      }, (error) => {\r\n          console.log(error.text);\r\n      });\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { firebase } from \"../Firebase/firebase\";\r\nimport \"../App.css\";\r\nimport {\r\n    Table, TableBody, TableCell, TableRow, TableHead,\r\n    TableContainer, Paper, makeStyles, Container,\r\n    Typography, Button, Grid, IconButton\r\n} from '@material-ui/core';\r\nimport { ScaleLoader } from 'react-spinners';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { AddCircle, Edit, Delete } from '@material-ui/icons';\r\nimport { getCustomersAdmin, getCustomer, updateCustomerAdmin, deleteCustomerAdmin } from '../data/customerData';\r\nimport {ConfirmDialog} from './ConfirmDialog';\r\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport Customer from \"../models/customer\";\r\nimport {sendconfEmail} from '../sendEmail/sendEmail'\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Box\r\n  } from '@material-ui/core';\r\nimport { Close } from '@material-ui/icons';\r\nconst firestore = firebase.firestore();\r\nconst Customers = () => {\r\n    const classes = useStyles();\r\n    const [customers, setCustomers] = useState([]);\r\n    const [customersUser, setCustomersUser] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [conOpen, setConOpen] = useState(false);\r\n    const [subOpen, setSubOpen] = useState(false);\r\n    const [doneOpen, setDoneOpen] = useState(false);\r\n    const [formMode, setFormMode] = useState(true);\r\n    const [allReserve, setAllReserve] = useState('');\r\n    const [custId, setCustId] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [ssn, setSsn] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [place, setPlace] = useState('');\r\n    const [date, setDate] = useState('');\r\n    const [time, setTime] = useState('');\r\n    const [detail, setDetail] = useState('');\r\n    const [status, setStatus] = useState('');\r\n    const [bdate, setBirth] = useState('');\r\n    const override = `\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;    \r\n        border-color: red;\r\n    `;\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setConOpen(false);\r\n        setSubOpen(false)\r\n    }\r\n    const handleDoneClose = () => setDoneOpen(false)\r\n\r\n    const handleName = (event) => {\r\n        setName(event.target.value);\r\n    }\r\n    const handleSsn = (event) => {\r\n        setSsn(event.target.value);\r\n    }\r\n    const handlePhone = (event) => {\r\n        setPhone(event.target.value);\r\n    }\r\n    const handlePlace = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n    const handleDate = (event) => {\r\n        setPlace(event.target.value);\r\n    }\r\n    const handleTime = (event) => {\r\n        setDate(event.target.value);\r\n    }\r\n    const handleEmail = (event) => {\r\n        setTime(event.target.value);\r\n    }\r\n    const handleDetail = (event) => {\r\n        setTime(event.target.value);\r\n    }\r\n    const handleStatus = (event) => {\r\n        setStatus(event.target.value);\r\n    }\r\n    \r\n    const getlist = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const list = await getCustomersAdmin();\r\n            setCustomers(list);\r\n            setAllReserve(list.length);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const getlistUser = async () => {\r\n        try {\r\n            const listUser = await getCustomersUser();\r\n            setCustomersUser(listUser);\r\n            setConOpen(true)\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const getSubmitUser = async () => {\r\n        try {\r\n            const listUser = await getCustomersUser();\r\n            setCustomersUser(listUser);\r\n            setSubOpen(true);\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const getCustomersUser = async () => {\r\n        try {\r\n            const response = await firestore.collection('users/' + email.toString() + '/custo');\r\n            const data = await response.get();\r\n            let array = [];\r\n            data.forEach(doc => {\r\n                const customer = new Customer(\r\n                    doc.id,\r\n                    doc.data().name,\r\n                    doc.data().bdate,\r\n                    doc.data().ssn,\r\n                    doc.data().phone,\r\n                    doc.data().email,\r\n                    doc.data().place,\r\n                    doc.data().date,\r\n                    doc.data().time,\r\n                    doc.data().detail,\r\n                    doc.data().status\r\n                );\r\n                array.push(customer);\r\n            });\r\n            return array;\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n    const getOneCustomer = async (id) => {\r\n        try {\r\n            setFormMode(false);\r\n            setCustId(id);\r\n            const response = await getCustomer(id);\r\n            setName(response.name);\r\n            setSsn(response.ssn);\r\n            setPhone(response.phone);\r\n            setEmail(response.email);\r\n            setPlace(response.place);\r\n            setDate(response.date);\r\n            setTime(response.time);\r\n            setDetail(response.detail);\r\n            setStatus(response.status);\r\n            setBirth(response.bdate);\r\n            setOpen(true);\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    const deleteHandler = async (id) => {\r\n        try {\r\n            await deleteCustomerAdmin(id);\r\n            setConOpen(false);\r\n            getlist();\r\n            toast.success('Customer Deleted Successfully');\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    const deleteHandlerUser = async (id) => {\r\n        try {\r\n            await deleteCustomerUser(id);\r\n            setConOpen(false);\r\n            getlist();\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    const addCustomerHandler = async (e) => {\r\n        try {\r\n            let status = \"ตรวจสอบแล้ว\";\r\n            const customer = {\r\n                name,\r\n                bdate,\r\n                ssn,\r\n                phone,\r\n                email,\r\n                place,\r\n                date,\r\n                time,\r\n                detail,\r\n                status\r\n            }\r\n            customersUser.map((custUser) => \r\n            updateCustomerUser(custUser.id, customer))\r\n            await updateCustomerAdmin(custId, customer);\r\n            toast.success('Customer Updated Successfully');\r\n            setOpen(false);\r\n            setSubOpen(false);\r\n            getlist();\r\n            sendconfEmail(e, name, email);\r\n            setDoneOpen(true);\r\n            setName('');\r\n            setBirth('');\r\n            setSsn('');\r\n            setPhone('');\r\n            setEmail('');\r\n            setPlace('');\r\n            setDate('');\r\n            setTime('');\r\n            setDetail('');\r\n            setStatus('');\r\n\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    const updateCustomerUser = async (id, data) => {\r\n        try {\r\n            const res = await getCustomer(custId);\r\n            setEmail(res.email);\r\n            const customer = await firestore.collection('users/' + email.toString() + '/custo').doc(id);\r\n            await customer.update(data);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    const deleteCustomerUser = async (id) => {\r\n        try {\r\n            await firestore.collection('users/' + email.toString() + '/custo').doc(id).delete();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getlist();\r\n    }, []);\r\n\r\n    const CustomerDialog = (props) => {\r\n        return (\r\n            <Dialog\r\n            fullWidth={true}\r\n            maxWidth='lg'\r\n            open={props.open}\r\n            aria-labelledby=\"max-width-dialog-title\">\r\n                <DialogTitle>Update Customer</DialogTitle>\r\n                <ValidatorForm>\r\n                    <DialogContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={6}>\r\n                                <p style={{fontSize:20}}>ชื่อ : <span style={{color:'#3F838C'}}>{props.name}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <p style={{fontSize:20}}>เลขบัตรประชาชน : <span style={{color:'#3F838C'}}>{props.ssn}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <p style={{fontSize:20}}>เบอร์โทร : <span style={{color:'#3F838C'}}>{props.phone}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <p style={{fontSize:20}}>อีเมล : <span style={{color:'#3F838C'}}>{props.email}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <p style={{fontSize:20}}>สถานที่ : <span style={{color:'#3F838C'}}>{props.place}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p style={{fontSize:20}}>วันที่จอง : <span style={{color:'#3F838C'}}>{props.date}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <p style={{fontSize:20}}>เวลาจอง : <span style={{color:'#3F838C'}}>{props.time}</span></p>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <p style={{fontSize:20}}>อาการเบื้องต้น : <span style={{color:'#3F838C'}}>{props.detail}</span></p>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button color=\"red\" onClick={() =>  getSubmitUser()}>\r\n                           Submit\r\n                        </Button>\r\n                        <Button type=\"submit\" color=\"secondary\" onClick={() =>  getlistUser()}>\r\n                           Delete\r\n                        </Button>\r\n                        <Button icon={Close} onClick={props.close} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </ValidatorForm>\r\n            </Dialog>\r\n        );\r\n    }\r\n\r\n    const ConfirmDelete = (props) => {\r\n        return (\r\n            <Dialog\r\n            open={props.open}\r\n            onClose={props.close}\r\n            aria-labelledby=\"max-width-dialog-title\"\r\n            >\r\n                <DialogTitle>Delete</DialogTitle>\r\n                <ValidatorForm\r\n                    onSubmit={props.close}\r\n                >\r\n                    <DialogContent>\r\n                        Confirm to delete\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button type=\"submit\" color=\"secondary\" onClick={() => customersUser.map((custUser) => (deleteHandler(custId)) && (deleteHandlerUser(custUser.id)))}>\r\n                           Delete\r\n                        </Button>\r\n                        <Button onClick={props.close} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </ValidatorForm>\r\n            </Dialog>\r\n        );\r\n      };\r\n      const ConfirmSubmit = (props) => {\r\n        return (\r\n            <Dialog\r\n            open={props.open}\r\n            onClose={props.close}\r\n            aria-labelledby=\"max-width-dialog-title\"\r\n            >\r\n                <DialogTitle>Submit</DialogTitle>\r\n                <ValidatorForm\r\n                >\r\n                    <DialogContent>\r\n                        Confirm to submit\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button type=\"submit\" color=\"secondary\" onClick={(e) => addCustomerHandler(e)}>\r\n                            Submit\r\n                        </Button>\r\n                        <Button onClick={props.close} color=\"primary\">\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </ValidatorForm>\r\n            </Dialog>\r\n        );\r\n      };\r\n\r\n    return (\r\n            <Grid style={{width:'100%', display:'block', pading:'20px'}}>\r\n            <TableContainer component={Paper} style={{width:'100%', display:'block', alignContent:'center'}}>\r\n                <Grid container>\r\n                    <Grid item xs={8}>\r\n                        <Typography className={classes.title} variant=\"h6\" component=\"div\">\r\n                            คิวทั้งหมด {allReserve}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Table className={classes.table} style={{width:'100%', alignContent:'center'}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={classes.head}>Name</TableCell>\r\n                            <TableCell className={classes.head}>SSN</TableCell>\r\n                            <TableCell className={classes.head}>Phone</TableCell>\r\n                            <TableCell className={classes.head}>Place</TableCell>\r\n                            <TableCell className={classes.head}>Date</TableCell>\r\n                            <TableCell className={classes.head}>Time</TableCell>\r\n                            <TableCell className={classes.head}>Detail</TableCell>\r\n                            <TableCell className={classes.head}>Status</TableCell>\r\n                            <TableCell className={classes.head}></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {customers.length === 0 ? (\r\n                            <TableRow>\r\n                                <TableCell colSpan={7}>\r\n                                    <ScaleLoader\r\n                                        css={override}\r\n                                        size={150}\r\n                                        color={\"#eb4034\"}\r\n                                        loading={loading} />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ) : (\r\n                            <>\r\n                                {customers.map((cust) => (\r\n                                    <TableRow key={cust.id}>\r\n                                        <TableCell>{cust.name}</TableCell>\r\n                                        <TableCell>{cust.ssn}</TableCell>\r\n                                        <TableCell>{cust.phone}</TableCell>\r\n                                        <TableCell>{cust.place}</TableCell>\r\n                                        <TableCell>{cust.date}</TableCell>\r\n                                        <TableCell>{cust.time}</TableCell>\r\n                                        <TableCell>{cust.detail}</TableCell>\r\n                                        <TableCell>{cust.status}</TableCell>\r\n                                        <TableCell>\r\n                                            <IconButton onClick={() => getOneCustomer(cust.id)} color=\"primary\" aria-label=\"update customer\">\r\n                                                <Edit />\r\n                                            </IconButton>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n                <CustomerDialog\r\n                open={open}\r\n                close={handleClose}\r\n                formmode={formMode}\r\n                name={name}\r\n                ssn={ssn}\r\n                phone={phone}\r\n                email={email}\r\n                place={place}\r\n                date={date}\r\n                time={time}\r\n                detail={detail}\r\n                status={status}\r\n                bdate={bdate}\r\n                changeName={handleName}\r\n                changeSsn={handleSsn}\r\n                changePhone={handlePhone}\r\n                changeEmail={handleEmail}\r\n                changePlace={handlePlace}\r\n                changeDate={handleDate}\r\n                changeTime={handleTime}\r\n                changeDetail={handleDetail}\r\n                changeStatus={handleStatus}\r\n                addCustomer={addCustomerHandler}\r\n            />\r\n            <ConfirmDelete\r\n                open={conOpen}\r\n                close={handleClose}\r\n                formmode={formMode}\r\n                onSub={ConfirmSubmit}\r\n                listUser={getlistUser}\r\n            />\r\n            <ConfirmSubmit\r\n                open={subOpen}\r\n                close={handleClose}\r\n                formmode={formMode}\r\n                addCustomer={addCustomerHandler}\r\n            />\r\n             <ConfirmDialog\r\n                open={doneOpen}\r\n                close={handleDoneClose}\r\n            />\r\n            </TableContainer>\r\n            </Grid>\r\n    );\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n    table: {\r\n        minWidth: 650,\r\n        ['@media (min-width:320px)']: { \r\n            width: '100%'\r\n        },\r\n    },\r\n    container: {\r\n        marginTop: '40px',\r\n    },\r\n    title: {\r\n        flex: '1 1 100%',\r\n        padding: '20px'\r\n    },\r\n    head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        float: 'right',\r\n    },\r\n}));\r\nexport default Customers;","import firebase from '../helpers/db';\r\nimport Appointment from '../models/appointment';\r\nimport Login from '../authentication/Login'\r\nconst firestore = firebase.firestore();\r\n\r\nexport const getAppointments = async () => {\r\n    try {\r\n        \r\n        const response = await firestore.collection('appointments')\r\n        const data = await response.get();\r\n        let array = [];\r\n        data.forEach(doc => {\r\n            const appointment = new Appointment(\r\n                doc.id,\r\n                doc.data().firstname,\r\n                doc.data().lastname,\r\n                doc.data().phonenumber,\r\n                doc.data().studentID,\r\n                doc.data().ssn,\r\n                doc.data().email,\r\n                doc.data().time,\r\n                doc.data().medicalcertificate\r\n            );\r\n            array.push(appointment);\r\n        });\r\n        return array;\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\nexport const addAppointment = async (appointment) => {\r\n    try {\r\n        await firestore.collection('appointments').doc().set(appointment);\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const getAppointment = async (id) => {\r\n    try {\r\n        const appointment = await firestore.collection('appointments').doc(id);\r\n        const data = await appointment.get();\r\n        return data.data();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const updateAppointment = async (id, data) => {\r\n    try {\r\n        const appointment = await firestore.collection('appointments').doc(id);\r\n        await appointment.update(data)\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nexport const deleteAppointment = async (id) => {\r\n    try {\r\n        await firestore.collection('appointments').doc(id).delete();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}","import React , {useState, useEffect}from 'react';\r\nimport {Table, TableBody, TableCell, TableRow, TableHead,\r\n    TableContainer, Paper, makeStyles, Container,\r\n    Typography, Button, Grid, IconButton} from '@material-ui/core';\r\nimport {ScaleLoader} from 'react-spinners';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport { AddCircle, Edit, Delete } from '@material-ui/icons';\r\nimport { addAppointment, getAppointments,  getAppointment, updateAppointment, deleteAppointment} from '../data/appointmentData';\r\nimport AppointmentDialog from './AppointmentDialog';\r\nconst Appointment = () => {\r\n    const classes = useStyles();\r\n    const [appointments, setAppointments] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [formMode, setFormMode] = useState(true);\r\n    const [custId, setCustId] = useState('');\r\n    const [firstname, setFirstName] = useState('');\r\n    const [lastname, setLastName] = useState('');\r\n    const [studentID, setStudentID] = useState('');\r\n    const [ssn, setSSN] = useState('');\r\n    const [phonenumber, setPhoneNumber] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [time, setTime] = useState('');\r\n    const [medicalcertificate, setMedicalcertificate] = useState('Yes');\r\n    \r\n    const override =`\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;    \r\n        border-color: red;\r\n    `;\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n    const handleFirstName = (event) => {\r\n        setFirstName(event.target.value);\r\n    }\r\n    const handleLastName = (event) => {\r\n        setLastName(event.target.value);\r\n    }\r\n    const handleStudentID = (event) => {\r\n        setStudentID(event.target.value);\r\n    }\r\n    const handleSSN = (event) => {\r\n        setSSN(event.target.value);\r\n    }\r\n    const handlePhoneNumber = (event) => {\r\n        setPhoneNumber(event.target.value);\r\n    }\r\n    const handleEmail = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n    const handleTime = (event) => {\r\n        setTime(event.target.value);\r\n    }\r\n    const handleCertificate = (event) => {\r\n        setMedicalcertificate(event.target.value);\r\n    }\r\n    \r\n    const getlist = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const list = await getAppointments();\r\n            setAppointments(list);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const getOneAppointment = async (id) => {\r\n        try {\r\n            setFormMode(false);\r\n            setCustId(id);\r\n            const response = await getAppointment(id);\r\n            setFirstName(response.firstname);\r\n            setLastName(response.lastname);\r\n            setStudentID(response.studentID);\r\n            setSSN(response.ssn);\r\n            setPhoneNumber(response.phonenumber);\r\n            setEmail(response.email);\r\n            setTime(response.time);\r\n            setMedicalcertificate(response.medicalcertificate)\r\n            setOpen(true);\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    \r\n    const deleteHandler = async (id) => {\r\n        try {\r\n            await deleteAppointment(id);\r\n            getlist();\r\n            toast.success('Customer Deleted Successfully');\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    const handleAdd = () => {\r\n        setOpen(true);\r\n        setFormMode(true);\r\n        setFirstName('');\r\n        setLastName('');\r\n        setStudentID('');\r\n        setSSN('');\r\n        setPhoneNumber('');\r\n        setEmail('');\r\n        setTime('');\r\n        setMedicalcertificate('Yes');\r\n    }\r\n    const addAppointmentHandler = async () => {\r\n        try {\r\n            const appointment = {\r\n                firstname,\r\n                lastname,\r\n                studentID,\r\n                ssn,\r\n                phonenumber,\r\n                email,\r\n                time,\r\n                medicalcertificate\r\n            }\r\n            if (formMode) {\r\n                await addAppointment(appointment);\r\n                toast.success('Customer Added Successfully');\r\n                getlist();\r\n                setOpen(false);\r\n                setFirstName('');\r\n                setLastName('');\r\n                setStudentID('');\r\n                setSSN('');\r\n                setPhoneNumber('');\r\n                setEmail('');\r\n                setTime('');\r\n                setMedicalcertificate('Yes');\r\n            } else {\r\n                await updateAppointment(custId, appointment);\r\n                toast.success('Customer Updated Successfully');\r\n                getlist();\r\n                setOpen(false);\r\n                setFirstName('');\r\n                setLastName('');\r\n                setStudentID('');\r\n                setSSN('');\r\n                setPhoneNumber('');\r\n                setEmail('');\r\n                setTime('');\r\n                setMedicalcertificate('Yes');\r\n            }\r\n        } catch (error) {\r\n            toast.error(error.message);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getlist();\r\n    }, []);\r\n    return (\r\n        <Container className={classes.container}>\r\n            <ToastContainer/>\r\n            <TableContainer component={Paper}>\r\n                <Grid container>\r\n                    <Grid item xs={8}>\r\n                    <Typography className={classes.title} variant=\"h6\" component=\"div\">\r\n                        All Appointments\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleAdd}\r\n                        className={classes.button}\r\n                        startIcon={<AddCircle/>}\r\n                    >Add</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Table className={classes.table}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={classes.head}>Full Name</TableCell>\r\n                            <TableCell className={classes.head}>Student ID</TableCell>\r\n                            <TableCell className={classes.head}>SSN</TableCell>\r\n                            <TableCell className={classes.head}>Phone Number</TableCell>\r\n                            <TableCell className={classes.head}>Email</TableCell>\r\n                            <TableCell className={classes.head}>Time</TableCell>\r\n                            <TableCell className={classes.head}>Medical Certificate</TableCell>\r\n                            <TableCell className={classes.head}>Action</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {appointments.length === 0 ? (\r\n                            <TableRow>\r\n                                <TableCell colSpan={8}>\r\n                                    <ScaleLoader\r\n                                    css={override}\r\n                                    size={150}\r\n                                    color={\"#eb4034\"}\r\n                                    loading={loading} />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ) : (\r\n                            <>\r\n                            {appointments.map((cust) => (\r\n                                <TableRow key={cust.id}>\r\n                                    <TableCell>{cust.firstname} {cust.lastname}</TableCell>\r\n                                    <TableCell>{cust.studentID}</TableCell>\r\n                                    <TableCell>{cust.ssn}</TableCell>\r\n                                    <TableCell>{cust.phonenumber}</TableCell>\r\n                                    <TableCell>{cust.email}</TableCell>\r\n                                    <TableCell>{cust.time}</TableCell>\r\n                                    <TableCell>{cust.medicalcertificate}</TableCell>\r\n                                    <TableCell>\r\n                                        <IconButton onClick={() => getOneAppointment(cust.id)} color=\"primary\" aria-label=\"update customer\">\r\n                                            <Edit />\r\n                                        </IconButton>\r\n                                        <IconButton onClick={() => deleteHandler(cust.id)} color=\"secondary\" aria-label=\"delete customer\">\r\n                                            <Delete />\r\n                                        </IconButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}    \r\n                            </>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <AppointmentDialog\r\n                open={open}\r\n                close={handleClose}\r\n                formmode={formMode}\r\n                firstname={firstname}\r\n                lastname={lastname}\r\n                studentID={studentID}\r\n                ssn={ssn}\r\n                phonenumber={phonenumber}\r\n                email={email}\r\n                time={time}\r\n                medicalcertificate={medicalcertificate}\r\n                changeFirstname={handleFirstName}\r\n                changeLastname={handleLastName}\r\n                changStudentID={handleStudentID}\r\n                changeSSN={handleSSN}\r\n                changephonenumber={handlePhoneNumber}\r\n                changeEmail={handleEmail}\r\n                changeTime={handleTime}\r\n                changeCertificate={handleCertificate}\r\n                addAppointment={addAppointmentHandler}\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    table: {\r\n        minWidth: 650,\r\n        ['@media (min-width:320px)']: { \r\n            fontSize: 10,\r\n        }\r\n    },\r\n    container: {\r\n        marginTop: '40px',\r\n        \r\n    },\r\n    title: {\r\n        flex: '1 1 100%',\r\n        padding: '20px',\r\n        \r\n        ['@media (min-width:320px)']: { \r\n            fontSize: 20,\r\n        }\r\n    },\r\n    head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        float: 'right',\r\n    },\r\n}));\r\n\r\nexport default Appointment;\r\n","export default __webpack_public_path__ + \"static/media/error.9336417a.png\";","import React from \"react\";\r\nimport { Layout } from 'antd';\r\nimport { Typography } from 'antd';\r\nimport { Button } from 'antd';\r\nimport error from '../images/error.png';\r\nimport {\r\n    Link,\r\n   \r\n  } from \"react-router-dom\";\r\nimport '../App.css'\r\n\r\nconst Errorpage = () => {\r\n    return(\r\n        <Layout id=\"error-layout\"style={{textAlign: 'center', background: '#99DFB2', alignItems: 'center'}}>\r\n            <img src={error} style={{width: 200, textAlign: 'center'}} alt=\"error\"/>\r\n            <Typography style={{}}>The page you requested could not be found</Typography>\r\n            <Layout style={{paddingTop: 10, background: '#99DFB2'}}>\r\n            <Link to ={'/main'}><Button type=\"primary\" shape=\"round\" style={{textAlign: 'center', width: 175}}>Go to mainpage</Button></Link>\r\n            </Layout>\r\n        </Layout>\r\n    )\r\n}\r\nexport default Errorpage;","import './App.css';\r\nimport NavBar from './layouts/NavBar';\r\nimport { useState, useEffect } from 'react';\r\nimport Login from './authentication/Login';\r\nimport SignUp from './authentication/SignUp';\r\nimport SignIn from './screens/AdminSignIn'\r\nimport Customers from './screens/Customer';\r\nimport Appointment from './screens/Appointment';\r\nimport Errorpage from './screens/Errorpage';\r\nimport { Layout } from 'antd';\r\nimport { firebase } from \"./Firebase/firebase\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\n\r\nconst Routers = () => (\r\n  <div>\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/admin\">\r\n          <NavBar/>\r\n          <Customers/>  \r\n        </Route>\r\n        <Route>\r\n          <Errorpage/>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  </div>\r\n);\r\n\r\nfunction App() {\r\n  const [isUserSignedIn, setIsUserSignedIn] = useState(true);\r\n  firebase.auth().onAuthStateChanged((user) => {\r\n    if(user) {\r\n      return setIsUserSignedIn(true);\r\n    }\r\n\r\n    setIsUserSignedIn(false)\r\n  })\r\n  if (isUserSignedIn === true){\r\n    return (\r\n      <section className=\"hero\">\r\n        <Layout class=\"mainLayout\"> \r\n          <Routers/>\r\n        </Layout>\r\n      </section>\r\n    );\r\n  } else {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={SignIn}/>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n    <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}